{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Workout.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isBlurred = _useState2[0],\n        setIsBlurred = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSetModal = _useState4[0],\n        setNewSetModal = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        timesModal = _useState6[0],\n        setTimesModal = _useState6[1];\n\n  const _useState7 = useState([{\n    name: 'deadlift',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'squat',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'bench press',\n    sets: [{\n      weight: 100,\n      reps: 7,\n      rpe: 6\n    }, {\n      weight: 115,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }]\n  }]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        lifts = _useState8[0],\n        setLifts = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        currentLiftIndex = _useState10[0],\n        setCurrentLiftIndex = _useState10[1];\n\n  const _useState11 = useState(60),\n        _useState12 = _slicedToArray(_useState11, 2),\n        restSecondsRemaining = _useState12[0],\n        setRestSecondsRemaining = _useState12[1];\n\n  function decrementTimeRemaining(time, setFunction) {\n    if (time > 0) {\n      setFunction(time - 1);\n    }\n  }\n\n  function startRestTimer() {\n    useEffect(() => {\n      setInterval(() => {\n        console.log(\"timer updated: \".concat(restSecondsRemaining));\n        decrementTimeRemaining(restSecondsRemaining, setRestSecondsRemaining);\n      }, 1000);\n    });\n  }\n\n  function toggleSetModal() {\n    setNewSetModal(!newSetModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(lifts.map((lift, index) => {\n      if (index === currentLiftIndex) {\n        lift.sets = [...lift.sets, newSet];\n      }\n\n      return lift;\n    }));\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n    return a.weight >= b.weight ? a : b;\n  }) : null;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"workout-screen\",\n    className: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"\\u2190\")), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(LiftLog, {\n    toggleModal: toggleSetModal,\n    currentLiftIndex: currentLiftIndex,\n    setCurrentLiftIndex: setCurrentLiftIndex,\n    lifts: lifts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), maxSet && maxSet.rpe >= 6.5 && React.createElement(E1rmDisplay, {\n    set: maxSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"lift-history-button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Lift History\")), newSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(NewSet, {\n    toggleModal: toggleSetModal,\n    addSet: addSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), timesModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"times-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(RestTimer, {\n    secondsRemaining: restSecondsRemaining,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: startRestTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \" Start \")), (newSetModal || timesModal) && React.createElement(Backdrop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n};\n\nexport default Workout;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Workout.js"],"names":["React","useState","Link","LiftLog","Modal","Backdrop","NewSet","E1rmDisplay","RestTimer","Workout","props","isBlurred","setIsBlurred","newSetModal","setNewSetModal","timesModal","setTimesModal","name","sets","weight","reps","rpe","lifts","setLifts","currentLiftIndex","setCurrentLiftIndex","restSecondsRemaining","setRestSecondsRemaining","decrementTimeRemaining","time","setFunction","startRestTimer","useEffect","setInterval","console","log","toggleSetModal","toggleTimesModal","addSet","newWeight","newReps","newRpe","newSet","map","lift","index","test","maxSet","length","reduce","a","b"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const [isBlurred, setIsBlurred] = useState(false);\n  const [newSetModal, setNewSetModal] = useState(false);\n  const [timesModal, setTimesModal] = useState(false);\n  const [lifts, setLifts] = useState([\n    {\n      name: 'deadlift',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'squat',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'bench press',\n      sets: [\n        { weight: 100, reps: 7, rpe: 6 },\n        { weight: 115, reps: 7, rpe: 7 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 }\n      ]\n    }\n  ]);\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n  const [restSecondsRemaining, setRestSecondsRemaining] = useState(60);\n\n  function decrementTimeRemaining(time, setFunction) {\n    if (time > 0) {\n      setFunction(time - 1);\n    }\n  }\n\n  function startRestTimer() {\n    useEffect(() => {\n      setInterval(() => {\n        console.log(`timer updated: ${restSecondsRemaining}`);\n        decrementTimeRemaining(restSecondsRemaining, setRestSecondsRemaining);\n      }, 1000);\n    }\n    )}\n\n  function toggleSetModal() {\n    setNewSetModal(!newSetModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(\n      lifts.map((lift, index) => {\n        if (index === currentLiftIndex) {\n          lift.sets = [...lift.sets, newSet];\n        }\n        return lift;\n      })\n    );\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length\n    ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n      return a.weight >= b.weight ? a : b;\n    })\n    : null;\n\n  return (\n    <React.Fragment>\n      <div id=\"workout-screen\" className={test}>\n        <Link to=\"/\" className=\"upper-left\">\n          <button type=\"button\" className=\"arrow-button\">\n              &larr;\n          </button>\n        </Link>\n        <button\n          type=\"button\"\n          onClick={toggleTimesModal}\n          className=\"upper-right button-underline\"\n        >\n            TIMES\n      </button>\n      <LiftLog\n        toggleModal={toggleSetModal}\n        currentLiftIndex={currentLiftIndex}\n        setCurrentLiftIndex={setCurrentLiftIndex}\n        lifts={lifts}\n      />\n          {maxSet && maxSet.rpe >= 6.5 && <E1rmDisplay set={maxSet} />}\n          <button type=\"button\" id=\"lift-history-button\" className=\"arrow-button\">\n              Lift History \n          </button>\n        </div>\n          {newSetModal && (\n            <Modal toggleButton={false} id=\"set-modal\">\n              <NewSet toggleModal={toggleSetModal} addSet={addSet} />\n            </Modal>\n          )}\n              {timesModal && (\n                <Modal toggleButton={false} id=\"times-modal\">\n                  <button\n                    type=\"button\"\n                    onClick={toggleTimesModal}\n                    className=\"upper-right button-underline\"\n                  >\n                      TIMES\n                </button>\n                <RestTimer secondsRemaining={restSecondsRemaining}/>\n                <button type=\"button\" onClick={startRestTimer}> Start </button>\n              </Modal>\n              )}\n                {(newSetModal || timesModal) && <Backdrop />}\n              </React.Fragment>\n  );\n};\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}