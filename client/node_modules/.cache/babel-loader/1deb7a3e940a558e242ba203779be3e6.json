{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Workout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport NewLift from './NewLift';\nimport EditLift from './EditLift';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isBlurred = _useState2[0],\n        setIsBlurred = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSetModal = _useState4[0],\n        setNewSetModal = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        editLiftModal = _useState6[0],\n        setEditLiftModal = _useState6[1];\n\n  const _useState7 = useState({\n    display: false,\n    index: 0\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        editSetModal = _useState8[0],\n        setEditSetModal = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        newLiftModal = _useState10[0],\n        setNewLiftModal = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        timesModal = _useState12[0],\n        setTimesModal = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        restTimerModal = _useState14[0],\n        setRestTimerModal = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        currentLiftIndex = _useState16[0],\n        setCurrentLiftIndex = _useState16[1];\n\n  const _useState17 = useState([{\n    name: 'rest',\n    decrement: true,\n    started: false,\n    finished: false,\n    seconds: 0\n  }]),\n        _useState18 = _slicedToArray(_useState17, 2),\n        timers = _useState18[0],\n        setTimers = _useState18[1]; //update times every second\n\n\n  useInterval(() => {\n    setTimers(timers.map(timer => {\n      if (timer.started) {\n        if (timer.decrement && timer.seconds > 0) {\n          return Object.assign(timer, {\n            seconds: timer.seconds - 1\n          });\n        } else if (timer.decrement) {\n          return Object.assign(timer, {\n            finished: true\n          });\n        } else if (!timer.decrement) {\n          return Object.assign(timer, {\n            seconds: timer.seconds + 1\n          });\n        } else {\n          return timer;\n        }\n      } else {\n        return timer;\n      }\n    }));\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(timers.map(timer => {\n      if (timer.name === timerName) {\n        return Object.assign(timer, {\n          seconds: newSeconds,\n          started: true,\n          finished: false\n        });\n      } else {\n        return timer;\n      }\n    }));\n  }\n\n  function closeSetModal() {\n    setNewSetModal(false);\n  }\n\n  function toggleSetModal() {\n    if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n  }\n\n  function toggleNewLiftModal() {\n    setNewLiftModal(!newLiftModal);\n  }\n\n  function toggleEditLiftNameModal() {\n    setNewLiftModal(true);\n  }\n\n  function toggleEditLiftModal() {\n    setEditLiftModal(!editLiftModal);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n  }\n\n  function addLift(newLift) {\n    setLifts([{\n      name: newLift,\n      sets: []\n    }, ...lifts]);\n  }\n\n  function updateLift(index, newLift) {\n    let updatedLifts = [...lifts];\n    updatedLifts[index].name = newLift;\n    setLifts(updatedLifts);\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n    return a.weight >= b.weight ? a : b;\n  }) : null;\n  const restTimer = timers.find(timer => timer.name === 'rest'); // Play sound when rest finishes\n\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n    }\n  }, [restTimer.finished]);\n  useEffect(() => {\n    if (newSetModal || newLiftModal || restTimerModal || editLiftModal || timesModal) {\n      setIsBlurred(true);\n    } else {\n      setIsBlurred(false);\n    }\n  }, [newSetModal, newLiftModal, restTimerModal, editLiftModal, timesModal]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"workout-screen\",\n    className: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"\\u2190\")), restTimer.started && !restTimer.finished && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), restTimer.finished && React.createElement(\"div\", {\n    className: \"rest-timer\",\n    id: \"rest-finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"REST FINISHED!\")), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    id: \"times-toggle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(LiftLog, {\n    toggleSetModal: toggleSetModal,\n    toggleNewLiftModal: toggleNewLiftModal,\n    currentLiftIndex: currentLiftIndex,\n    setCurrentLiftIndex: setCurrentLiftIndex,\n    lifts: lifts,\n    setEditSetModal: setEditSetModal,\n    toggleEditLiftModal: toggleEditLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(E1rmDisplay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"lift-history-button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Lift History\")), newSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(NewSet, {\n    closeModal: closeSetModal,\n    toggleModal: toggleSetModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  })), timesModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"times-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"TIMES\"), restTimer.started && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  })), restTimerModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"new-rest-timer-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(NewRestTimer, {\n    toggleModal: toggleRestTimerModal,\n    startTimer: startIndividualTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  })), newLiftModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"new-lift-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(NewLift, {\n    toggleModal: toggleNewLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  })), editSetModal.display && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"edit-lift-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"editing: \", editSetModal.index), editLiftModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"edit-lift-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(EditLift, {\n    toggleModal: toggleEditLiftModal,\n    changeLiftName: toggleEditLiftNameModal,\n    lift: lifts[currentLiftIndex],\n    setLifts: setLifts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  })), isBlurred && React.createElement(Backdrop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }));\n};\n\nexport default Workout;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Workout.js"],"names":["React","useState","useEffect","Link","LiftLog","Modal","Backdrop","NewSet","E1rmDisplay","RestTimer","useInterval","NewRestTimer","NewLift","EditLift","soundFile","Workout","props","isBlurred","setIsBlurred","newSetModal","setNewSetModal","editLiftModal","setEditLiftModal","display","index","editSetModal","setEditSetModal","newLiftModal","setNewLiftModal","timesModal","setTimesModal","restTimerModal","setRestTimerModal","currentLiftIndex","setCurrentLiftIndex","name","decrement","started","finished","seconds","timers","setTimers","map","timer","Object","assign","startIndividualTimer","timerName","newSeconds","closeSetModal","toggleSetModal","toggleTimesModal","toggleRestTimerModal","toggleNewLiftModal","toggleEditLiftNameModal","toggleEditLiftModal","addSet","newWeight","newReps","newRpe","newSet","weight","reps","rpe","addLift","newLift","setLifts","sets","lifts","updateLift","updatedLifts","test","maxSet","length","reduce","a","b","restTimer","find","sound","Audio","src","play"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport NewLift from './NewLift';\nimport EditLift from './EditLift';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const [isBlurred, setIsBlurred] = useState(false);\n  const [newSetModal, setNewSetModal] = useState(false);\n  const [editLiftModal, setEditLiftModal] = useState(false);\n  const [editSetModal, setEditSetModal] = useState({\n    display: false,\n    index: 0\n  });\n  const [newLiftModal, setNewLiftModal] = useState(false);\n  const [timesModal, setTimesModal] = useState(false);\n  const [restTimerModal, setRestTimerModal] = useState(false);\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n  const [timers, setTimers] = useState([\n    {\n      name: 'rest',\n      decrement: true,\n      started: false,\n      finished: false,\n      seconds: 0\n    }\n  ]);\n\n  //update times every second\n  useInterval(() => {\n    setTimers(\n      timers.map(timer => {\n        if (timer.started) {\n          if (timer.decrement && timer.seconds > 0) {\n            return Object.assign(timer, { seconds: timer.seconds - 1 });\n          } else if (timer.decrement) {\n            return Object.assign(timer, { finished: true });\n          } else if (!timer.decrement) {\n            return Object.assign(timer, { seconds: timer.seconds + 1 });\n          } else {\n            return timer;\n          }\n        } else {\n          return timer;\n        }\n      })\n    );\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(\n      timers.map(timer => {\n        if (timer.name === timerName) {\n          return Object.assign(timer, {\n            seconds: newSeconds,\n            started: true,\n            finished: false\n          });\n        } else {\n          return timer;\n        }\n      })\n    );\n  }\n\n  function closeSetModal() {\n    setNewSetModal(false);\n  }\n\n  function toggleSetModal() {\n    if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n  }\n\n  function toggleNewLiftModal() {\n    setNewLiftModal(!newLiftModal);\n  }\n\n  function toggleEditLiftNameModal() {\n    setNewLiftModal(true);\n  }\n\n  function toggleEditLiftModal() {\n    setEditLiftModal(!editLiftModal);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n  }\n\n  function addLift(newLift) {\n    setLifts([{ name: newLift, sets: [] }, ...lifts]);\n  }\n\n  function updateLift(index, newLift) {\n    let updatedLifts = [...lifts];\n    updatedLifts[index].name = newLift;\n    setLifts(updatedLifts);\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length\n    ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n        return a.weight >= b.weight ? a : b;\n      })\n    : null;\n\n  const restTimer = timers.find(timer => timer.name === 'rest');\n\n  // Play sound when rest finishes\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n    }\n  }, [restTimer.finished]);\n\n  useEffect(() => {\n    if (\n      newSetModal ||\n      newLiftModal ||\n      restTimerModal ||\n      editLiftModal ||\n      timesModal\n    ) {\n      setIsBlurred(true);\n    } else {\n      setIsBlurred(false);\n    }\n  }, [newSetModal, newLiftModal, restTimerModal, editLiftModal, timesModal]);\n\n  return (\n    <React.Fragment>\n      <div id=\"workout-screen\" className={test}>\n        <Link to=\"/\" className=\"upper-left\">\n          <button type=\"button\" className=\"arrow-button\">\n            &larr;\n          </button>\n        </Link>\n        {restTimer.started && !restTimer.finished && (\n          <RestTimer secondsRemaining={restTimer.seconds} />\n        )}\n        {restTimer.finished && (\n          <div className=\"rest-timer\" id=\"rest-finished\">\n            <b>REST FINISHED!</b>\n          </div>\n        )}\n        <button\n          type=\"button\"\n          onClick={toggleTimesModal}\n          className=\"upper-right button-underline\"\n          id=\"times-toggle\"\n        >\n          TIMES\n        </button>\n        <LiftLog\n          toggleSetModal={toggleSetModal}\n          toggleNewLiftModal={toggleNewLiftModal}\n          currentLiftIndex={currentLiftIndex}\n          setCurrentLiftIndex={setCurrentLiftIndex}\n          lifts={lifts}\n          setEditSetModal={setEditSetModal}\n          toggleEditLiftModal={toggleEditLiftModal}\n        />\n        <E1rmDisplay />\n        <button type=\"button\" id=\"lift-history-button\" className=\"arrow-button\">\n          Lift History\n        </button>\n      </div>\n      {newSetModal && (\n        <Modal toggleButton={false} id=\"set-modal\">\n          <NewSet\n            closeModal={closeSetModal}\n            toggleModal={toggleSetModal}\n          />\n        </Modal>\n      )}\n      {timesModal && (\n        <Modal toggleButton={false} id=\"times-modal\">\n          <button\n            type=\"button\"\n            onClick={toggleTimesModal}\n            className=\"upper-right button-underline\"\n          >\n            TIMES\n          </button>\n          {restTimer.started && (\n            <RestTimer secondsRemaining={restTimer.seconds} />\n          )}\n        </Modal>\n      )}\n      {restTimerModal && (\n        <Modal toggleButton={false} id=\"new-rest-timer-modal\">\n          <NewRestTimer\n            toggleModal={toggleRestTimerModal}\n            startTimer={startIndividualTimer}\n          />\n        </Modal>\n      )}\n      {newLiftModal && (\n        <Modal toggleButton={false} id=\"new-lift-modal\">\n          <NewLift toggleModal={toggleNewLiftModal}/>\n        </Modal>\n      )}\n      {editSetModal.display && (\n        <Modal toggleButton={false} id=\"edit-lift-modal\">\n          editing: {editSetModal.index}\n        </Modal>\n      )}\n      {editLiftModal && (\n        <Modal toggleButton={false} id=\"edit-lift-modal\">\n          <EditLift\n            toggleModal={toggleEditLiftModal}\n            changeLiftName={toggleEditLiftNameModal}\n            lift={lifts[currentLiftIndex]}\n            setLifts={setLifts}\n          />\n        </Modal>\n      )}\n      {isBlurred && <Backdrop />}\n    </React.Fragment>\n  );\n};\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}