{"ast":null,"code":"import _objectSpread from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\nconst initialState = {\n  lifts: [{\n    name: 'SQUAT',\n    sets: [{\n      weight: 255,\n      reps: 10,\n      rpe: 6\n    }, {\n      weight: 287,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 287,\n      reps: 8,\n      rpe: 8\n    }]\n  }, {\n    name: 'DEADLIFT',\n    sets: []\n  }, {\n    name: 'BENCH PRESS',\n    sets: []\n  }],\n  currentLiftIndex: 0,\n  restTimer: {\n    timeStarted: 0,\n    duration: 0\n  }\n};\n\nfunction addLiftReducer(state, {\n  payload\n}) {\n  state.lifts.unshift({\n    name: payload.name,\n    sets: []\n  });\n}\n\nfunction deleteLiftReducer(state, {\n  payload\n}) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, {\n  payload\n}) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  };\n}\n\nfunction startRestTimerReducer(state, {\n  payload\n}) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  }\n}); // Selectors\n\nconst getCurrentLiftIndex = createSelector(['currentWorkout.currentLiftIndex'], index => index);\nconst getCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index]);\nconst getSetsForCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index].sets);\nconst atEnd = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => index === lifts.length - 1);\nconst atBeginning = createSelector(['currentWorkout.currentLiftIndex'], index => index === 0);\nconst getHeaviestSet = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => {\n  if (lifts[index].sets.length) {\n    return lifts[index].sets.reduce((setA, setB) => {\n      return setA.weight >= setB.weight ? setA : setB;\n    });\n  }\n});\nconst getEstimatedOneRepMax = createSelector([getHeaviestSet], set => {\n  if (set && set.rpe >= 6.5) {\n    return calculateE1RM(set.weight, set.reps, set.rpe);\n  }\n}); // TODO - Delete after testing is finished\n\nconst testState = {\n  currentWorkout: _objectSpread({}, initialState)\n};\nconst actions = currentWorkout.actions,\n      reducer = currentWorkout.reducer; // Overwite generate actions with custom actions.\n\nactions.startRestTimer = startRestTimer;\nexport { getSetsForCurrentLift, getCurrentLift, atBeginning, atEnd, getEstimatedOneRepMax };\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/currentWorkout.js"],"names":["createSlice","createSelector","configureStore","calculateE1RM","initialState","lifts","name","sets","weight","reps","rpe","currentLiftIndex","restTimer","timeStarted","duration","addLiftReducer","state","payload","unshift","deleteLiftReducer","splice","index","renameLiftReducer","addSetReducer","liftIndex","push","set","deleteSetReducer","setIndex","updateSetReducer","updatedSet","incrementCurrentLiftIndexReducer","length","decrementCurrentLiftIndexReducer","startRestTimer","type","Date","now","startRestTimerReducer","currentWorkout","slice","reducers","addLift","deleteLift","renameLift","addSet","deleteSet","updateSet","incrementCurrentLiftIndex","decrementCurrentLiftIndex","getCurrentLiftIndex","getCurrentLift","getSetsForCurrentLift","atEnd","atBeginning","getHeaviestSet","reduce","setA","setB","getEstimatedOneRepMax","testState","actions","reducer","currentWorkoutActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\n\nconst initialState = {\n  lifts: [\n    {\n      name: 'SQUAT',\n      sets: [\n        { weight: 255, reps: 10, rpe: 6 },\n        { weight: 287, reps: 7, rpe: 7 },\n        { weight: 287, reps: 8, rpe: 8 }\n      ]\n    },\n    { name: 'DEADLIFT', sets: [] },\n    { name: 'BENCH PRESS', sets: [] }\n  ],\n  currentLiftIndex: 0,\n  restTimer: {\n    timeStarted: 0,\n    duration: 0\n  }\n};\n\n\nfunction addLiftReducer(state, { payload }) {\n  state.lifts.unshift({ name: payload.name, sets: [] });\n}\n\nfunction deleteLiftReducer(state, { payload }) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, { payload }) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  }\n}\n\nfunction startRestTimerReducer(state, { payload }) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  },\n});\n\n// Selectors\nconst getCurrentLiftIndex = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index\n);\n\nconst getCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index]\n);\n\nconst getSetsForCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index].sets\n);\n\nconst atEnd = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => index === lifts.length - 1\n);\n\nconst atBeginning = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index === 0\n);\n\nconst getHeaviestSet = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => {\n    if (lifts[index].sets.length) {\n      return lifts[index].sets.reduce((setA, setB) => {\n        return setA.weight >= setB.weight ? setA : setB;\n      });\n    }\n  }\n);\n\nconst getEstimatedOneRepMax = createSelector(\n  [getHeaviestSet],\n  set => {\n    if (set && set.rpe >= 6.5) {\n      return calculateE1RM(set.weight, set.reps, set.rpe);\n    }\n  }\n);\n\n// TODO - Delete after testing is finished\nconst testState = {\n  currentWorkout: { ...initialState }\n};\n\nconst { actions, reducer } = currentWorkout;\n\n// Overwite generate actions with custom actions.\nactions.startRestTimer = startRestTimer;\n\n\nexport {\n  getSetsForCurrentLift,\n  getCurrentLift,\n  atBeginning,\n  atEnd,\n  getEstimatedOneRepMax\n};\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}