{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/LiftLog.js\";\nimport React, { useState } from 'react';\n\nconst LiftLog = () => {\n  const _useState = useState([{\n    name: 'deadlift'\n  }, {\n    name: 'squat'\n  }, {\n    name: 'bench press'\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        lifts = _useState2[0],\n        setLifts = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentLiftIndex = _useState4[0],\n        setCurrentLiftIndex = _useState4[1];\n\n  function selectPreviousLift() {\n    if (currentLiftIndex === lifts.length) {\n      setCurrentLiftIndex(0);\n    } else {\n      setCurrentLiftIndex(currentLiftIndex - 1);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    id: \"lift-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(LiftSelector, {\n    currentLift: lifts[currentLiftIndex],\n    selectPreviousLift: selectPreviousLift,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nconst LiftSelector = props => {\n  return React.createElement(\"div\", {\n    id: \"lift-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: props.selectPreviousLift,\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"\\u2190\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.currentLift.name), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"\\uFF0B\"));\n};\n\nexport default LiftLog;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/LiftLog.js"],"names":["React","useState","LiftLog","name","lifts","setLifts","currentLiftIndex","setCurrentLiftIndex","selectPreviousLift","length","LiftSelector","props","currentLift"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACMD,QAAQ,CAAC,CACjC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GADiC,EAEjC;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFiC,EAGjC;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHiC,CAAD,CADd;AAAA;AAAA,QACbC,KADa;AAAA,QACNC,QADM;;AAAA,qBAO4BJ,QAAQ,CAAC,CAAD,CAPpC;AAAA;AAAA,QAObK,gBAPa;AAAA,QAOKC,mBAPL;;AASpB,WAASC,kBAAT,GAA8B;AAC5B,QAAIF,gBAAgB,KAAKF,KAAK,CAACK,MAA/B,EAAuC;AACrCF,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACLA,MAAAA,mBAAmB,CAACD,gBAAgB,GAAG,CAApB,CAAnB;AACD;AACF;;AAED,SACE;AAAK,IAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAEF,KAAK,CAACE,gBAAD,CAAhC;AAAoD,IAAA,kBAAkB,EAAEE,kBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtBD;;AAwBA,MAAME,YAAY,GAAGC,KAAK,IAAI;AAC5B,SACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEA,KAAK,CAACH,kBAArC;AAAyD,IAAA,SAAS,EAAC,cAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,KAAK,CAACC,WAAN,CAAkBT,IAAvB,CAJF,EAKE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CADF;AAWD,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst LiftLog = () => {\n  const [lifts, setLifts] = useState([\n    { name: 'deadlift' },\n    { name: 'squat' },\n    { name: 'bench press' }\n  ]);\n\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n\n  function selectPreviousLift() {\n    if (currentLiftIndex === lifts.length) {\n      setCurrentLiftIndex(0);\n    } else {\n      setCurrentLiftIndex(currentLiftIndex - 1);\n    }\n  }\n\n  return (\n    <div id=\"lift-log\">\n      <LiftSelector currentLift={lifts[currentLiftIndex]} selectPreviousLift={selectPreviousLift}/>\n    </div>\n  );\n};\n\nconst LiftSelector = props => {\n  return (\n    <div id=\"lift-selector\">\n      <button type=\"button\" onClick={props.selectPreviousLift} className=\"arrow-button\">\n        &larr;\n      </button>\n      <h2>{props.currentLift.name}</h2>\n      <button type=\"button\" className=\"arrow-button\">\n        &#65291;\n      </button>\n    </div>\n  );\n};\n\nexport default LiftLog;\n"]},"metadata":{},"sourceType":"module"}