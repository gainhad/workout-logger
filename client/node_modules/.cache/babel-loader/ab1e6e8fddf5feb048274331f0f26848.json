{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/RestTimer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './RestTimer.scss';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport soundFile from '../assets/audio/bell.wav';\nimport RestTimerDisplay from './RestTimerDisplay';\n\nconst RestTimer = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n\n  const updateSecondsRemaining = timer => timer.duration - (Date.now() - timer.timeStarted) / 1000;\n\n  const _useState = useState(updateSecondsRemaining(timer)),\n        _useState2 = _slicedToArray(_useState, 2),\n        secondsRemaining = _useState2[0],\n        setSecondsRemaining = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        notificationSoundPlayed = _useState4[0],\n        setNotificationSoundPlayed = _useState4[1]; // Update timer every second.\n\n\n  useInterval(() => {\n    setSecondsRemaining(timer.duration - (Date.now() - timer.timeStarted) / 1000);\n  }, 1000); // Play sound when rest finishes.\n\n  useEffect(() => {\n    if (secondsRemaining <= 0 && !notificationSoundPlayed) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n      setNotificationSoundPlayed(true);\n    } else if (secondsRemaining > 0 && notificationSoundPlayed) {\n      setNotificationSoundPlayed(false);\n    }\n  }, [secondsRemaining]); // Render based on seconds remaining.\n\n  if (secondsRemaining > 0) {\n    return React.createElement(RestTimerDisplay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  } else if (secondsRemaining <= 0) {\n    return React.createElement(\"div\", {\n      className: \"rest-timer\",\n      id: \"rest-finished\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"REST FINISHED!\"));\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/RestTimer.js"],"names":["React","useState","useEffect","useSelector","prettyDisplayTime","useInterval","soundFile","RestTimerDisplay","RestTimer","props","timer","state","currentWorkout","restTimer","updateSecondsRemaining","duration","Date","now","timeStarted","secondsRemaining","setSecondsRemaining","notificationSoundPlayed","setNotificationSoundPlayed","sound","Audio","src","play"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,kBAAP;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAMC,KAAK,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,SAA/B,CAAzB;;AACA,QAAMC,sBAAsB,GAAGJ,KAAK,IAClCA,KAAK,CAACK,QAAN,GAAiB,CAACC,IAAI,CAACC,GAAL,KAAaP,KAAK,CAACQ,WAApB,IAAmC,IADtD;;AAFyB,oBAIuBjB,QAAQ,CAACa,sBAAsB,CAACJ,KAAD,CAAvB,CAJ/B;AAAA;AAAA,QAIlBS,gBAJkB;AAAA,QAIAC,mBAJA;;AAAA,qBAKqCnB,QAAQ,CAAC,KAAD,CAL7C;AAAA;AAAA,QAKlBoB,uBALkB;AAAA,QAKOC,0BALP,kBAOzB;;;AACAjB,EAAAA,WAAW,CAAC,MAAM;AAChBe,IAAAA,mBAAmB,CAChBV,KAAK,CAACK,QAAN,GAAiB,CAACC,IAAI,CAACC,GAAL,KAAaP,KAAK,CAACQ,WAApB,IAAmC,IADpC,CAAnB;AAGD,GAJU,EAIR,IAJQ,CAAX,CARyB,CAczB;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,gBAAgB,IAAI,CAApB,IAAyB,CAACE,uBAA9B,EAAuD;AACrD,YAAME,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,GAAYnB,SAAZ;AACAiB,MAAAA,KAAK,CAACG,IAAN;AACAJ,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACD,KALD,MAKO,IAAKH,gBAAgB,GAAG,CAAnB,IAAwBE,uBAA7B,EAAsD;AAC3DC,MAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACD;AACF,GATQ,EASN,CAACH,gBAAD,CATM,CAAT,CAfyB,CA0BzB;;AACA,MAAIA,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJD,MAIO,IAAIA,gBAAgB,IAAI,CAAxB,EAA2B;AAChC,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,EAAE,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF;AAKD,GANM,MAMA;AACL,WAAO,IAAP;AACD;AACF,CAxCD;;AA0CA,eAAeX,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './RestTimer.scss';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport soundFile from '../assets/audio/bell.wav';\nimport RestTimerDisplay from './RestTimerDisplay';\n\nconst RestTimer = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n  const updateSecondsRemaining = timer =>\n    timer.duration - (Date.now() - timer.timeStarted) / 1000;\n  const [secondsRemaining, setSecondsRemaining] = useState(updateSecondsRemaining(timer));\n  const [notificationSoundPlayed, setNotificationSoundPlayed] = useState(false);\n\n  // Update timer every second.\n  useInterval(() => {\n    setSecondsRemaining(\n      (timer.duration - (Date.now() - timer.timeStarted) / 1000) \n    );\n  }, 1000);\n\n  // Play sound when rest finishes.\n  useEffect(() => {\n    if (secondsRemaining <= 0 && !notificationSoundPlayed) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n      setNotificationSoundPlayed(true);\n    } else if ( secondsRemaining > 0 && notificationSoundPlayed) {\n      setNotificationSoundPlayed(false);\n    }\n  }, [secondsRemaining]);\n\n  // Render based on seconds remaining.\n  if (secondsRemaining > 0) {\n    return (\n      <RestTimerDisplay />\n    );\n  } else if (secondsRemaining <= 0) {\n    return (\n      <div className=\"rest-timer\" id=\"rest-finished\">\n        <b>REST FINISHED!</b>\n      </div>\n    )\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimer;\n"]},"metadata":{},"sourceType":"module"}