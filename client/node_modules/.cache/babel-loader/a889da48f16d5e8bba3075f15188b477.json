{"ast":null,"code":"import { createSlice, createSelector } from 'redux-starter-kit';\nconst initialState = {\n  weight: [{\n    timestamp: 1562783942272,\n    measurement: 160\n  }, {\n    timestamp: 1562797642272,\n    measurement: 190\n  }, {\n    timestamp: 1562123042272,\n    measurement: 80\n  }, {\n    timestamp: 1562782452272,\n    measurement: 480\n  }],\n  waist: [{\n    timestamp: 1562783942272,\n    measurement: 60\n  }, {\n    timestamp: 1562797642272,\n    measurement: 90\n  }, {\n    timestamp: 1562123042272,\n    measurement: 30\n  }, {\n    timestamp: 1562782452272,\n    measurement: 80\n  }]\n}; // Custom Actions\n\nfunction addOrUpdateMeasurement(index = undefined, type, measurement) {\n  return {\n    type: 'measurementHistory/addOrUpdateMeasurement',\n    meta: {\n      index: index,\n      type: type\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n} // Reducers\n\n\nfunction addOrUpdateMeasurementReducer(state, {\n  payload,\n  meta\n}) {\n  console.log(payload);\n\n  if (isNaN(meta.index)) {\n    state[meta.type].unshift(payload);\n  } else {\n    state[meta.index] = payload;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {\n    addOrUpdateMeasurement: addOrUpdateMeasurementReducer\n  }\n});\nconst actions = measurementHistory.actions,\n      reducer = measurementHistory.reducer; // Overwite generated actions with custom actions.\n\nactions.addOrUpdateMeasurement = addOrUpdateMeasurement;\nexport { actions as measurementHistoryActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/measurementHistory.js"],"names":["createSlice","createSelector","initialState","weight","timestamp","measurement","waist","addOrUpdateMeasurement","index","undefined","type","meta","payload","Date","now","addOrUpdateMeasurementReducer","state","console","log","isNaN","unshift","measurementHistory","slice","reducers","actions","reducer","measurementHistoryActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,mBAA5C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GADM,EAKN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GALM,EASN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GATM,EAaN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GAbM,CADW;AAmBnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GADK,EAKL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GALK,EASL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GATK,EAaL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GAbK;AAnBY,CAArB,C,CAuCA;;AACA,SAASE,sBAAT,CAAgCC,KAAK,GAAGC,SAAxC,EAAmDC,IAAnD,EAAyDL,WAAzD,EAAsE;AACpE,SAAO;AACLK,IAAAA,IAAI,EAAE,2CADD;AAELC,IAAAA,IAAI,EAAE;AACJH,MAAAA,KAAK,EAAEA,KADH;AAEJE,MAAAA,IAAI,EAAEA;AAFF,KAFD;AAMLE,IAAAA,OAAO,EAAE;AACPR,MAAAA,SAAS,EAAES,IAAI,CAACC,GAAL,EADJ;AAEPT,MAAAA,WAAW,EAAEA;AAFN;AANJ,GAAP;AAWD,C,CAED;;;AACA,SAASU,6BAAT,CAAuCC,KAAvC,EAA8C;AAAEJ,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAA9C,EAAiE;AAC/DM,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AACA,MAAIO,KAAK,CAACR,IAAI,CAACH,KAAN,CAAT,EAAuB;AACrBQ,IAAAA,KAAK,CAACL,IAAI,CAACD,IAAN,CAAL,CAAiBU,OAAjB,CAAyBR,OAAzB;AACD,GAFD,MAEO;AACLI,IAAAA,KAAK,CAACL,IAAI,CAACH,KAAN,CAAL,GAAoBI,OAApB;AACD;AACF;;AAED,MAAMS,kBAAkB,GAAGrB,WAAW,CAAC;AACrCsB,EAAAA,KAAK,EAAE,oBAD8B;AAErCpB,EAAAA,YAAY,EAAEA,YAFuB;AAGrCqB,EAAAA,QAAQ,EAAE;AACRhB,IAAAA,sBAAsB,EAAEQ;AADhB;AAH2B,CAAD,CAAtC;MAQQS,O,GAAqBH,kB,CAArBG,O;MAASC,O,GAAYJ,kB,CAAZI,O,EAEjB;;AACAD,OAAO,CAACjB,sBAAR,GAAiCA,sBAAjC;AAEA,SAASiB,OAAO,IAAIE,yBAApB;AACA,eAAeD,OAAf","sourcesContent":["import { createSlice, createSelector } from 'redux-starter-kit';\n\nconst initialState = {\n  weight: [\n    {\n      timestamp: 1562783942272,\n      measurement: 160\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 190\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 80\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 480\n    }\n  ],\n  waist: [\n    {\n      timestamp: 1562783942272,\n      measurement: 60\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 90\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 30\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 80\n    }\n  ]\n};\n\n// Custom Actions\nfunction addOrUpdateMeasurement(index = undefined, type, measurement) {\n  return {\n    type: 'measurementHistory/addOrUpdateMeasurement',\n    meta: {\n      index: index,\n      type: type\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n}\n\n// Reducers\nfunction addOrUpdateMeasurementReducer(state, { payload, meta }) {\n  console.log(payload);\n  if (isNaN(meta.index)) {\n    state[meta.type].unshift(payload);\n  } else {\n    state[meta.index] = payload;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {\n    addOrUpdateMeasurement: addOrUpdateMeasurementReducer\n  }\n});\n\nconst { actions, reducer } = measurementHistory;\n\n// Overwite generated actions with custom actions.\nactions.addOrUpdateMeasurement = addOrUpdateMeasurement;\n\nexport { actions as measurementHistoryActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}