{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Modal.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.scss';\n\nconst Modal = props => {\n  const _useState = useState(props.isOpen),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const closeModal = () => setIsOpen(false);\n\n  if (isOpen) {\n    return ReactDOM.createPortal(React.createElement(\"div\", {\n      className: \"modal\",\n      id: props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, props.toggleButton && React.createElement(\"button\", {\n      type: \"button\",\n      onClick: closeModal,\n      id: \"close-modal-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"X\"), React.cloneElement(props.children, {\n      closeModal: closeModal\n    })), document.getElementById('root'));\n  } else {\n    return null;\n  }\n};\n\nModal.defaultProps = {\n  toggleButton: false\n};\nexport default Modal;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Modal.js"],"names":["React","useState","ReactDOM","Modal","props","isOpen","setIsOpen","closeModal","createPortal","id","toggleButton","cloneElement","children","document","getElementById","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,cAAP;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA,oBACOH,QAAQ,CAACG,KAAK,CAACC,MAAP,CADf;AAAA;AAAA,QACdA,MADc;AAAA,QACNC,SADM;;AAErB,QAAMC,UAAU,GAAG,MAAMD,SAAS,CAAC,KAAD,CAAlC;;AAEA,MAAID,MAAJ,EAAY;AACV,WAAOH,QAAQ,CAACM,YAAT,CACL;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAEJ,KAAK,CAACK,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,KAAK,CAACM,YAAN,IACC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEH,UAA/B;AAA2C,MAAA,EAAE,EAAC,oBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,EAMOP,KAAK,CAACW,YAAN,CAAmBP,KAAK,CAACQ,QAAzB,EAAmC;AAACL,MAAAA,UAAU,EAAEA;AAAb,KAAnC,CANP,CADK,EASLM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CATK,CAAP;AAWD,GAZD,MAYO;AACL,WAAO,IAAP;AACD;AACF,CAnBD;;AAqBAX,KAAK,CAACY,YAAN,GAAqB;AACnBL,EAAAA,YAAY,EAAE;AADK,CAArB;AAIA,eAAeP,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Modal.scss';\n\nconst Modal = props => {\n  const [isOpen, setIsOpen] = useState(props.isOpen);\n  const closeModal = () => setIsOpen(false);\n\n  if (isOpen) {\n    return ReactDOM.createPortal(\n      <div className=\"modal\" id={props.id}>\n        {props.toggleButton && (\n          <button type=\"button\" onClick={closeModal} id=\"close-modal-button\">\n            X\n          </button>\n        )}\n            {React.cloneElement(props.children, {closeModal: closeModal})}\n      </div>,\n      document.getElementById('root')\n    );\n  } else {\n    return null;\n  }\n};\n\nModal.defaultProps = {\n  toggleButton: false\n};\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}