{"ast":null,"code":"import _objectSpread from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\nconst initialState = {\n  lifts: [{\n    name: 'SQUAT',\n    sets: [{\n      weight: 255,\n      reps: 10,\n      rpe: 6\n    }, {\n      weight: 287,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 287,\n      reps: 8,\n      rpe: 8\n    }]\n  }, {\n    name: 'DEADLIFT',\n    sets: []\n  }, {\n    name: 'BENCH PRESS',\n    sets: []\n  }],\n  currentLiftIndex: 0,\n  restTimer: {}\n};\n\nfunction addLiftReducer(state, {\n  payload\n}) {\n  state.lifts.unshift({\n    name: payload.name,\n    sets: []\n  });\n}\n\nfunction deleteLiftReducer(state, {\n  payload\n}) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, {\n  payload\n}) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimerReducer(state, {\n  payload\n}) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  }\n}); // Selectors\n\nconst getCurrentLiftIndex = createSelector(['currentWorkout.currentLiftIndex'], index => index);\nconst getCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index]);\nconst getSetsForCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index].sets);\nconst atEnd = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => index === lifts.length - 1);\nconst atBeginning = createSelector(['currentWorkout.currentLiftIndex'], index => index === 0);\nconst getHeaviestSet = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => {\n  if (lifts[index].sets.length) {\n    return lifts[index].sets.reduce((setA, setB) => {\n      return setA.weight >= setB.weight ? setA : setB;\n    });\n  }\n});\nconst getEstimatedOneRepMax = createSelector([getHeaviestSet], set => {\n  if (set && set.rpe >= 6.5) {\n    return calculateE1RM(set.weight, set.reps, set.rpe);\n  }\n}); // TODO - Delete after testing is finished\n\nconst testState = {\n  currentWorkout: _objectSpread({}, initialState)\n};\nconst actions = currentWorkout.actions,\n      reducer = currentWorkout.reducer;\nexport { getSetsForCurrentLift, getCurrentLift, atBeginning, atEnd, getEstimatedOneRepMax };\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/currentWorkout.js"],"names":["createSlice","createSelector","configureStore","calculateE1RM","initialState","lifts","name","sets","weight","reps","rpe","currentLiftIndex","restTimer","addLiftReducer","state","payload","unshift","deleteLiftReducer","splice","index","renameLiftReducer","addSetReducer","liftIndex","push","set","deleteSetReducer","setIndex","updateSetReducer","updatedSet","incrementCurrentLiftIndexReducer","length","decrementCurrentLiftIndexReducer","startRestTimerReducer","timeStarted","duration","currentWorkout","slice","reducers","addLift","deleteLift","renameLift","addSet","deleteSet","updateSet","incrementCurrentLiftIndex","decrementCurrentLiftIndex","startRestTimer","getCurrentLiftIndex","getCurrentLift","getSetsForCurrentLift","atEnd","atBeginning","getHeaviestSet","reduce","setA","setB","getEstimatedOneRepMax","testState","actions","reducer","currentWorkoutActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\n\nconst initialState = {\n  lifts: [\n    {\n      name: 'SQUAT',\n      sets: [\n        { weight: 255, reps: 10, rpe: 6 },\n        { weight: 287, reps: 7, rpe: 7 },\n        { weight: 287, reps: 8, rpe: 8 }\n      ]\n    },\n    { name: 'DEADLIFT', sets: [] },\n    { name: 'BENCH PRESS', sets: [] }\n  ],\n  currentLiftIndex: 0,\n  restTimer: {}\n};\n\nfunction addLiftReducer(state, { payload }) {\n  state.lifts.unshift({ name: payload.name, sets: [] });\n}\n\nfunction deleteLiftReducer(state, { payload }) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, { payload }) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimerReducer(state, { payload }) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  }\n});\n\n// Selectors\nconst getCurrentLiftIndex = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index\n);\n\nconst getCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index]\n);\n\nconst getSetsForCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index].sets\n);\n\nconst atEnd = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => index === lifts.length - 1\n);\n\nconst atBeginning = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index === 0\n);\n\nconst getHeaviestSet = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => {\n    if (lifts[index].sets.length) {\n      return lifts[index].sets.reduce((setA, setB) => {\n        return setA.weight >= setB.weight ? setA : setB;\n      });\n    }\n  }\n);\n\nconst getEstimatedOneRepMax = createSelector(\n  [getHeaviestSet],\n  set => {\n    if (set && set.rpe >= 6.5) {\n      return calculateE1RM(set.weight, set.reps, set.rpe);\n    }\n  }\n);\n\n// TODO - Delete after testing is finished\nconst testState = {\n  currentWorkout: { ...initialState }\n};\n\nconst { actions, reducer } = currentWorkout;\nexport {\n  getSetsForCurrentLift,\n  getCurrentLift,\n  atBeginning,\n  atEnd,\n  getEstimatedOneRepMax\n};\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}