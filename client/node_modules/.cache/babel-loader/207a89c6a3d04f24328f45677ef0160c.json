{"ast":null,"code":"import { createSlice, createSelector } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\nconst initialState = {\n  lifts: [{\n    name: 'SQUAT',\n    sets: [{\n      weight: 255,\n      reps: 10,\n      rpe: 6\n    }, {\n      weight: 287,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 287,\n      reps: 8,\n      rpe: 8\n    }]\n  }, {\n    name: 'DEADLIFT',\n    sets: []\n  }, {\n    name: 'BENCH PRESS',\n    sets: []\n  }],\n  currentLiftIndex: 0,\n  restTimer: {\n    timeStarted: NaN,\n    duration: NaN\n  }\n};\n\nfunction addOrRenameLiftReducer(state, {\n  payload\n}) {\n  if (payload.liftIndex) {\n    state.lifts[payload.liftIndex].name = payload.name;\n  } else {\n    state.lifts.unshift({\n      name: payload.name,\n      sets: []\n    });\n  }\n}\n\nfunction deleteLiftReducer(state, {\n  payload\n}) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, {\n  payload\n}) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addOrUpdateSetReducer(state, {\n  payload\n}) {\n  if (payload.setIndex) {\n    state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.set;\n  } else {\n    state.lifts[payload.liftIndex].sets.push(payload.set);\n  }\n}\n\nfunction deleteSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  };\n}\n\nfunction startRestTimerReducer(state, {\n  payload\n}) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addOrUpdateSet: addOrUpdateSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  }\n}); // Selectors\n\nconst getCurrentLiftIndex = createSelector(['currentWorkout.currentLiftIndex'], index => index);\nconst getCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index]);\nconst getSetsForCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index].sets);\nconst atEnd = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => index === lifts.length - 1);\nconst atBeginning = createSelector(['currentWorkout.currentLiftIndex'], index => index === 0);\nconst getHeaviestSet = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => {\n  if (lifts[index].sets.length) {\n    return lifts[index].sets.reduce((setA, setB) => {\n      return setA.weight >= setB.weight ? setA : setB;\n    });\n  }\n});\nconst getEstimatedOneRepMax = createSelector([getHeaviestSet], set => {\n  if (set && set.rpe >= 6.5) {\n    return calculateE1RM(set.weight, set.reps, set.rpe);\n  }\n});\nconst actions = currentWorkout.actions,\n      reducer = currentWorkout.reducer; // Overwite generate actions with custom actions.\n\nactions.startRestTimer = startRestTimer;\nexport { getSetsForCurrentLift, getCurrentLiftIndex, getCurrentLift, atBeginning, atEnd, getEstimatedOneRepMax };\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/currentWorkout.js"],"names":["createSlice","createSelector","calculateE1RM","initialState","lifts","name","sets","weight","reps","rpe","currentLiftIndex","restTimer","timeStarted","NaN","duration","addOrRenameLiftReducer","state","payload","liftIndex","unshift","deleteLiftReducer","splice","index","renameLiftReducer","addOrUpdateSetReducer","setIndex","set","push","deleteSetReducer","updateSetReducer","updatedSet","incrementCurrentLiftIndexReducer","length","decrementCurrentLiftIndexReducer","startRestTimer","type","Date","now","startRestTimerReducer","currentWorkout","slice","reducers","addLift","addLiftReducer","deleteLift","renameLift","addOrUpdateSet","deleteSet","updateSet","incrementCurrentLiftIndex","decrementCurrentLiftIndex","getCurrentLiftIndex","getCurrentLift","getSetsForCurrentLift","atEnd","atBeginning","getHeaviestSet","reduce","setA","setB","getEstimatedOneRepMax","actions","reducer","currentWorkoutActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\n\nconst initialState = {\n  lifts: [\n    {\n      name: 'SQUAT',\n      sets: [\n        { weight: 255, reps: 10, rpe: 6 },\n        { weight: 287, reps: 7, rpe: 7 },\n        { weight: 287, reps: 8, rpe: 8 }\n      ]\n    },\n    { name: 'DEADLIFT', sets: [] },\n    { name: 'BENCH PRESS', sets: [] }\n  ],\n  currentLiftIndex: 0,\n  restTimer: {\n    timeStarted: NaN,\n    duration: NaN \n  }\n};\n\n\nfunction addOrRenameLiftReducer(state, { payload }) {\n  if (payload.liftIndex) {\n    state.lifts[payload.liftIndex].name = payload.name;\n  } else {\n    state.lifts.unshift({ name: payload.name, sets: [] });\n  }\n}\n\nfunction deleteLiftReducer(state, { payload }) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, { payload }) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addOrUpdateSetReducer(state, { payload }) {\n  if (payload.setIndex) {\n    state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.set;\n  } else {\n    state.lifts[payload.liftIndex].sets.push(payload.set);\n  }\n}\n\nfunction deleteSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  }\n}\n\nfunction startRestTimerReducer(state, { payload }) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addOrUpdateSet: addOrUpdateSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer,\n    startRestTimer: startRestTimerReducer\n  },\n});\n\n// Selectors\nconst getCurrentLiftIndex = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index\n);\n\nconst getCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index]\n);\n\nconst getSetsForCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index].sets\n);\n\nconst atEnd = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => index === lifts.length - 1\n);\n\nconst atBeginning = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index === 0\n);\n\nconst getHeaviestSet = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => {\n    if (lifts[index].sets.length) {\n      return lifts[index].sets.reduce((setA, setB) => {\n        return setA.weight >= setB.weight ? setA : setB;\n      });\n    }\n  }\n);\n\nconst getEstimatedOneRepMax = createSelector(\n  [getHeaviestSet],\n  set => {\n    if (set && set.rpe >= 6.5) {\n      return calculateE1RM(set.weight, set.reps, set.rpe);\n    }\n  }\n);\n\nconst { actions, reducer } = currentWorkout;\n\n// Overwite generate actions with custom actions.\nactions.startRestTimer = startRestTimer;\n\n\nexport {\n  getSetsForCurrentLift,\n  getCurrentLiftIndex,\n  getCurrentLift,\n  atBeginning,\n  atEnd,\n  getEstimatedOneRepMax\n};\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}