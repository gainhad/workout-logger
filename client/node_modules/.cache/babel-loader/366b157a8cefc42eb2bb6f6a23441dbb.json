{"ast":null,"code":"import { createSlice, createSelector } from 'redux-starter-kit';\nconst initialState = {\n  weight: [{\n    timestamp: 1562783942272,\n    measurement: 160,\n    unit: 'pounds'\n  }, {\n    timestamp: 1562797642272,\n    measurement: 190,\n    unit: 'pounds'\n  }, {\n    timestamp: 1562123042272,\n    measurement: 80,\n    unit: 'pounds'\n  }, {\n    timestamp: 1562782452272,\n    measurement: 480,\n    unit: 'pounds'\n  }],\n  waist: [{\n    timestamp: 1562783942272,\n    measurement: 60,\n    unit: 'inches'\n  }, {\n    timestamp: 1562797642272,\n    measurement: 90,\n    unit: 'inches'\n  }, {\n    timestamp: 1562123042272,\n    measurement: 30,\n    unit: 'inches'\n  }, {\n    timestamp: 1562782452272,\n    measurement: 80,\n    unit: 'inches'\n  }]\n}; // Custom Actions\n\nfunction addOrUpdateMeasurement(index, type, measurement) {\n  return {\n    type: 'measurementHistory/addOrUpdateMeasurement',\n    meta: {\n      index: index,\n      type: type\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n} // Reducers\n\n\nfunction addOrUpdateMeasurementReducer(state, {\n  payload,\n  meta\n}) {\n  if (isNaN(meta.index)) {\n    state[meta.type].unshift(payload);\n  } else {\n    state[meta.type][meta.index].measurement = payload.measurement;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {\n    addOrUpdateMeasurement: addOrUpdateMeasurementReducer\n  }\n});\nconst getMeasurementTypesAlphabetized = createSelector(['measurementHistory'], history => {\n  console.log(history);\n  return Object.keys(history).sort().map(name => {\n    return {\n      name: name,\n      unit: history[name].unit\n    };\n  });\n});\nconst actions = measurementHistory.actions,\n      reducer = measurementHistory.reducer; // Overwite generated actions with custom actions.\n\nactions.addOrUpdateMeasurement = addOrUpdateMeasurement;\nexport { getMeasurementTypesAlphabetized };\nexport { actions as measurementHistoryActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/measurementHistory.js"],"names":["createSlice","createSelector","initialState","weight","timestamp","measurement","unit","waist","addOrUpdateMeasurement","index","type","meta","payload","Date","now","addOrUpdateMeasurementReducer","state","isNaN","unshift","measurementHistory","slice","reducers","getMeasurementTypesAlphabetized","history","console","log","Object","keys","sort","map","name","actions","reducer","measurementHistoryActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector } from 'redux-starter-kit';\n\nconst initialState = {\n  weight: [\n    {\n      timestamp: 1562783942272,\n      measurement: 160,\n      unit: 'pounds'\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 190,\n      unit: 'pounds'\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 80,\n      unit: 'pounds'\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 480,\n      unit: 'pounds'\n    }\n  ],\n  waist: [\n    {\n      timestamp: 1562783942272,\n      measurement: 60,\n      unit: 'inches'\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 90,\n      unit: 'inches'\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 30,\n      unit: 'inches'\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 80,\n      unit: 'inches'\n    }\n  ]\n};\n\n// Custom Actions\nfunction addOrUpdateMeasurement(index, type, measurement) {\n  return {\n    type: 'measurementHistory/addOrUpdateMeasurement',\n    meta: {\n      index: index,\n      type: type\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n}\n\n// Reducers\nfunction addOrUpdateMeasurementReducer(state, { payload, meta }) {\n  if (isNaN(meta.index)) {\n    state[meta.type].unshift(payload);\n  } else {\n    state[meta.type][meta.index].measurement = payload.measurement;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {\n    addOrUpdateMeasurement: addOrUpdateMeasurementReducer\n  }\n});\n\nconst getMeasurementTypesAlphabetized = createSelector(\n  ['measurementHistory'],\n  history => {\n    console.log(history);\n    return Object.keys(history)\n      .sort()\n      .map(name => {\n        return { name: name, unit: history[name].unit };\n      });\n  }\n);\n\nconst { actions, reducer } = measurementHistory;\n\n// Overwite generated actions with custom actions.\nactions.addOrUpdateMeasurement = addOrUpdateMeasurement;\n\nexport { getMeasurementTypesAlphabetized };\nexport { actions as measurementHistoryActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}