{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Workout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport newRestTimer from './newRestTimer';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isBlurred = _useState2[0],\n        setIsBlurred = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSetModal = _useState4[0],\n        setNewSetModal = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        timesModal = _useState6[0],\n        setTimesModal = _useState6[1];\n\n  const _useState7 = useState([{\n    name: 'deadlift',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'squat',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'bench press',\n    sets: [{\n      weight: 100,\n      reps: 7,\n      rpe: 6\n    }, {\n      weight: 115,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }]\n  }]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        lifts = _useState8[0],\n        setLifts = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        currentLiftIndex = _useState10[0],\n        setCurrentLiftIndex = _useState10[1];\n\n  const _useState11 = useState([{\n    name: 'rest',\n    decrement: true,\n    started: false,\n    seconds: 0\n  }]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        timers = _useState12[0],\n        setTimers = _useState12[1]; //update times every second\n\n\n  useInterval(() => {\n    setTimers(timers.map(timer => {\n      if (timer.started) {\n        if (timer.decrement && timer.seconds > 0) {\n          return Object.assign(timer, {\n            seconds: timer.seconds - 1\n          });\n        } else if (!timer.decrement) {\n          return Object.assign(timer, {\n            seconds: timer.seconds + 1\n          });\n        } else {\n          return timer;\n        }\n      } else {\n        return timer;\n      }\n    }));\n  }, 1000);\n\n  function toggleSetModal() {\n    setNewSetModal(!newSetModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(lifts.map((lift, index) => {\n      if (index === currentLiftIndex) {\n        lift.sets = [...lift.sets, newSet];\n      }\n\n      return lift;\n    }));\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n    return a.weight >= b.weight ? a : b;\n  }) : null;\n  const restTimer = timers.find(timer => timer.name === 'rest');\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"workout-screen\",\n    className: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\u2190\")), restTimer.started && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    id: \"times-toggle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(LiftLog, {\n    toggleModal: toggleSetModal,\n    currentLiftIndex: currentLiftIndex,\n    setCurrentLiftIndex: setCurrentLiftIndex,\n    lifts: lifts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), maxSet && maxSet.rpe >= 6.5 && React.createElement(E1rmDisplay, {\n    set: maxSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"lift-history-button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Lift History\")), newSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(NewSet, {\n    toggleModal: toggleSetModal,\n    addSet: addSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), timesModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"times-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(RestTimer, {\n    secondsRemaining: timers.find(timer => timer.name === 'rest').seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  })), (newSetModal || timesModal) && React.createElement(Backdrop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n};\n\nexport default Workout;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Workout.js"],"names":["React","useState","useEffect","Link","LiftLog","Modal","Backdrop","NewSet","E1rmDisplay","RestTimer","useInterval","newRestTimer","Workout","props","isBlurred","setIsBlurred","newSetModal","setNewSetModal","timesModal","setTimesModal","name","sets","weight","reps","rpe","lifts","setLifts","currentLiftIndex","setCurrentLiftIndex","decrement","started","seconds","timers","setTimers","map","timer","Object","assign","toggleSetModal","toggleTimesModal","addSet","newWeight","newReps","newRpe","newSet","lift","index","test","maxSet","length","reduce","a","b","restTimer","find"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport newRestTimer from './newRestTimer';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const [isBlurred, setIsBlurred] = useState(false);\n  const [newSetModal, setNewSetModal] = useState(false);\n  const [timesModal, setTimesModal] = useState(false);\n  const [lifts, setLifts] = useState([\n    {\n      name: 'deadlift',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'squat',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'bench press',\n      sets: [\n        { weight: 100, reps: 7, rpe: 6 },\n        { weight: 115, reps: 7, rpe: 7 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 }\n      ]\n    }\n  ]);\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n  const [timers, setTimers] = useState([\n    { name: 'rest', decrement: true, started: false, seconds: 0 }\n  ]);\n\n  //update times every second\n  useInterval(() => {\n    setTimers(timers.map(timer => {\n      if (timer.started) {\n        if (timer.decrement && timer.seconds > 0) {\n          return Object.assign(timer, {seconds: timer.seconds - 1});\n        } else if (!timer.decrement) {\n          return Object.assign(timer, {seconds: timer.seconds + 1});\n        } else {\n          return timer;\n        }\n      } else {\n        return timer;\n      }\n    }));\n  }, 1000);\n\n  function toggleSetModal() {\n    setNewSetModal(!newSetModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(\n      lifts.map((lift, index) => {\n        if (index === currentLiftIndex) {\n          lift.sets = [...lift.sets, newSet];\n        }\n        return lift;\n      })\n    );\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length\n    ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n        return a.weight >= b.weight ? a : b;\n      })\n    : null;\n\n  const restTimer = timers.find(timer => timer.name === 'rest');\n\n  return (\n    <React.Fragment>\n      <div id=\"workout-screen\" className={test}>\n        <Link to=\"/\" className=\"upper-left\">\n          <button type=\"button\" className=\"arrow-button\">\n            &larr;\n          </button>\n        </Link>\n          {restTimer.started && <RestTimer secondsRemaining={restTimer.seconds} />}\n        <button\n          type=\"button\"\n          onClick={toggleTimesModal}\n          className=\"upper-right button-underline\"\n          id=\"times-toggle\"\n        >\n          TIMES\n        </button>\n        <LiftLog\n          toggleModal={toggleSetModal}\n          currentLiftIndex={currentLiftIndex}\n          setCurrentLiftIndex={setCurrentLiftIndex}\n          lifts={lifts}\n        />\n        {maxSet && maxSet.rpe >= 6.5 && <E1rmDisplay set={maxSet} />}\n        <button type=\"button\" id=\"lift-history-button\" className=\"arrow-button\">\n          Lift History\n        </button>\n      </div>\n      {newSetModal && (\n        <Modal toggleButton={false} id=\"set-modal\">\n          <NewSet toggleModal={toggleSetModal} addSet={addSet} />\n        </Modal>\n      )}\n      {timesModal && (\n        <Modal toggleButton={false} id=\"times-modal\">\n          <button\n            type=\"button\"\n            onClick={toggleTimesModal}\n            className=\"upper-right button-underline\"\n          >\n            TIMES\n          </button>\n          <RestTimer\n            secondsRemaining={\n              timers.find(timer => timer.name === 'rest').seconds\n            }\n          />\n        </Modal>\n      )}\n      {(newSetModal || timesModal) && <Backdrop />}\n    </React.Fragment>\n  );\n};\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}