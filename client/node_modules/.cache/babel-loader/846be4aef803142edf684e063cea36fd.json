{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Workout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isBlurred = _useState2[0],\n        setIsBlurred = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSetModal = _useState4[0],\n        setNewSetModal = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        timesModal = _useState6[0],\n        setTimesModal = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        restTimerModal = _useState8[0],\n        setRestTimerModal = _useState8[1];\n\n  const _useState9 = useState([{\n    name: 'deadlift',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'squat',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'bench press',\n    sets: [{\n      weight: 100,\n      reps: 7,\n      rpe: 6\n    }, {\n      weight: 115,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }]\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        lifts = _useState10[0],\n        setLifts = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        currentLiftIndex = _useState12[0],\n        setCurrentLiftIndex = _useState12[1];\n\n  const _useState13 = useState([{\n    name: 'rest',\n    decrement: true,\n    started: false,\n    finished: false,\n    seconds: 0\n  }]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        timers = _useState14[0],\n        setTimers = _useState14[1]; //update times every second\n\n\n  useInterval(() => {\n    setTimers(timers.map(timer => {\n      if (timer.started) {\n        if (timer.decrement && timer.seconds > 0) {\n          return Object.assign(timer, {\n            seconds: timer.seconds - 1\n          });\n        } else if (timer.decrement) {\n          return Object.assign(timer, {\n            finished: true\n          });\n        } else if (!timer.decrement) {\n          return Object.assign(timer, {\n            seconds: timer.seconds + 1\n          });\n        } else {\n          return timer;\n        }\n      } else {\n        return timer;\n      }\n    }));\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(timers.map(timer => {\n      if (timer.name === timerName) {\n        return Object.assign(timer, {\n          seconds: newSeconds,\n          started: true,\n          finished: false\n        });\n      } else {\n        return timer;\n      }\n    }));\n  }\n\n  function toggleSetModal(cancel = false) {\n    if (cancel) {\n      console.log(cancel);\n      setNewSetModal(true);\n      setIsBlurred(false);\n    } else if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n      setIsBlurred(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(lifts.map((lift, index) => {\n      if (index === currentLiftIndex) {\n        lift.sets = [...lift.sets, newSet];\n      }\n\n      return lift;\n    }));\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n    return a.weight >= b.weight ? a : b;\n  }) : null;\n  const restTimer = timers.find(timer => timer.name === 'rest'); // Play sound when rest finishes\n\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n    }\n  }, [restTimer.finished]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"workout-screen\",\n    className: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"\\u2190\")), restTimer.started && !restTimer.finished && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), restTimer.finished && React.createElement(\"div\", {\n    className: \"rest-timer\",\n    id: \"rest-finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"REST FINISHED!\")), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    id: \"times-toggle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(LiftLog, {\n    toggleModal: toggleSetModal,\n    currentLiftIndex: currentLiftIndex,\n    setCurrentLiftIndex: setCurrentLiftIndex,\n    lifts: lifts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), maxSet && maxSet.rpe >= 6.5 && React.createElement(E1rmDisplay, {\n    set: maxSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"lift-history-button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Lift History\")), newSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(NewSet, {\n    toggleModal: toggleSetModal,\n    addSet: addSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })), timesModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"times-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(RestTimer, {\n    secondsRemaining: timers.find(timer => timer.name === 'rest').seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })), restTimerModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"new-rest-timer-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(NewRestTimer, {\n    toggleModal: toggleRestTimerModal,\n    startTimer: startIndividualTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })), (newSetModal || timesModal || restTimerModal) && React.createElement(Backdrop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }));\n};\n\nexport default Workout;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Workout.js"],"names":["React","useState","useEffect","Link","LiftLog","Modal","Backdrop","NewSet","E1rmDisplay","RestTimer","useInterval","NewRestTimer","soundFile","Workout","props","isBlurred","setIsBlurred","newSetModal","setNewSetModal","timesModal","setTimesModal","restTimerModal","setRestTimerModal","name","sets","weight","reps","rpe","lifts","setLifts","currentLiftIndex","setCurrentLiftIndex","decrement","started","finished","seconds","timers","setTimers","map","timer","Object","assign","startIndividualTimer","timerName","newSeconds","toggleSetModal","cancel","console","log","toggleTimesModal","toggleRestTimerModal","addSet","newWeight","newReps","newRpe","newSet","lift","index","test","maxSet","length","reduce","a","b","restTimer","find","sound","Audio","src","play"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,gBAAP;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA,oBACWb,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,QAChBc,SADgB;AAAA,QACLC,YADK;;AAAA,qBAEef,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAEhBgB,WAFgB;AAAA,QAEHC,cAFG;;AAAA,qBAGajB,QAAQ,CAAC,KAAD,CAHrB;AAAA;AAAA,QAGhBkB,UAHgB;AAAA,QAGJC,aAHI;;AAAA,qBAIqBnB,QAAQ,CAAC,KAAD,CAJ7B;AAAA;AAAA,QAIhBoB,cAJgB;AAAA,QAIAC,iBAJA;;AAAA,qBAKGrB,QAAQ,CAAC,CACjC;AACEsB,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI;AAFR,GADiC,EAUjC;AACEJ,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI;AAFR,GAViC,EAmBjC;AACEJ,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI,EAKJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KALI;AAFR,GAnBiC,CAAD,CALX;AAAA;AAAA,QAKhBC,KALgB;AAAA,QAKTC,QALS;;AAAA,sBAmCyB5B,QAAQ,CAAC,CAAD,CAnCjC;AAAA;AAAA,QAmChB6B,gBAnCgB;AAAA,QAmCEC,mBAnCF;;AAAA,sBAoCK9B,QAAQ,CAAC,CACnC;AAAEsB,IAAAA,IAAI,EAAE,MAAR;AAAgBS,IAAAA,SAAS,EAAE,IAA3B;AAAiCC,IAAAA,OAAO,EAAE,KAA1C;AAAiDC,IAAAA,QAAQ,EAAE,KAA3D;AAAkEC,IAAAA,OAAO,EAAE;AAA3E,GADmC,CAAD,CApCb;AAAA;AAAA,QAoChBC,MApCgB;AAAA,QAoCRC,SApCQ,mBAwCvB;;;AACA3B,EAAAA,WAAW,CAAC,MAAM;AAChB2B,IAAAA,SAAS,CACPD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AAClB,UAAIA,KAAK,CAACN,OAAV,EAAmB;AACjB,YAAIM,KAAK,CAACP,SAAN,IAAmBO,KAAK,CAACJ,OAAN,GAAgB,CAAvC,EAA0C;AACxC,iBAAOK,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEJ,YAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAA3B,WAArB,CAAP;AACD,SAFD,MAEO,IAAII,KAAK,CAACP,SAAV,EAAqB;AAC1B,iBAAOQ,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEL,YAAAA,QAAQ,EAAE;AAAZ,WAArB,CAAP;AACD,SAFM,MAEA,IAAI,CAACK,KAAK,CAACP,SAAX,EAAsB;AAC3B,iBAAOQ,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEJ,YAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAA3B,WAArB,CAAP;AACD,SAFM,MAEA;AACL,iBAAOI,KAAP;AACD;AACF,OAVD,MAUO;AACL,eAAOA,KAAP;AACD;AACF,KAdD,CADO,CAAT;AAiBD,GAlBU,EAkBR,IAlBQ,CAAX;;AAoBA,WAASG,oBAAT,CAA8BC,SAA9B,EAAyCC,UAAzC,EAAqD;AACnDP,IAAAA,SAAS,CACPD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AAClB,UAAIA,KAAK,CAAChB,IAAN,KAAeoB,SAAnB,EAA8B;AAC5B,eAAOH,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEJ,UAAAA,OAAO,EAAES,UAAX;AAAuBX,UAAAA,OAAO,EAAE,IAAhC;AAAsCC,UAAAA,QAAQ,EAAE;AAAhD,SAArB,CAAP;AACD,OAFD,MAEO;AACL,eAAOK,KAAP;AACD;AACF,KAND,CADO,CAAT;AASD;;AAED,WAASM,cAAT,CAAwBC,MAAM,GAAG,KAAjC,EAAwC;AACtC,QAAIA,MAAJ,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA5B,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD,MAIO,IAAIC,WAAJ,EAAiB;AACtBC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAI,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAHM,MAGA;AACLJ,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF;;AAED,WAASiC,gBAAT,GAA4B;AAC1B7B,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASmC,oBAAT,GAAgC;AAC9B5B,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACAL,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASoC,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4C;AAC1C,UAAMC,MAAM,GAAG;AACb9B,MAAAA,MAAM,EAAE2B,SADK;AAEb1B,MAAAA,IAAI,EAAE2B,OAFO;AAGb1B,MAAAA,GAAG,EAAE2B;AAHQ,KAAf;AAKAzB,IAAAA,QAAQ,CACND,KAAK,CAACU,GAAN,CAAU,CAACkB,IAAD,EAAOC,KAAP,KAAiB;AACzB,UAAIA,KAAK,KAAK3B,gBAAd,EAAgC;AAC9B0B,QAAAA,IAAI,CAAChC,IAAL,GAAY,CAAC,GAAGgC,IAAI,CAAChC,IAAT,EAAe+B,MAAf,CAAZ;AACD;;AACD,aAAOC,IAAP;AACD,KALD,CADM,CAAR;AAQD;;AAED,QAAME,IAAI,GAAG3C,SAAS,GAAG,SAAH,GAAe,EAArC;AACA,QAAM4C,MAAM,GAAG/B,KAAK,CAACE,gBAAD,CAAL,CAAwBN,IAAxB,CAA6BoC,MAA7B,GACXhC,KAAK,CAACE,gBAAD,CAAL,CAAwBN,IAAxB,CAA6BqC,MAA7B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5C,WAAOD,CAAC,CAACrC,MAAF,IAAYsC,CAAC,CAACtC,MAAd,GAAuBqC,CAAvB,GAA2BC,CAAlC;AACD,GAFD,CADW,GAIX,IAJJ;AAMA,QAAMC,SAAS,GAAG5B,MAAM,CAAC6B,IAAP,CAAY1B,KAAK,IAAIA,KAAK,CAAChB,IAAN,KAAe,MAApC,CAAlB,CAxHuB,CA0HvB;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8D,SAAS,CAAC9B,QAAd,EAAwB;AACtB,YAAMgC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,GAAYxD,SAAZ;AACAsD,MAAAA,KAAK,CAACG,IAAN;AAED;AACF,GAPQ,EAON,CAACL,SAAS,CAAC9B,QAAX,CAPM,CAAT;AASA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAyB,IAAA,SAAS,EAAEwB,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAa,IAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,EAMIM,SAAS,CAAC/B,OAAV,IAAqB,CAAC+B,SAAS,CAAC9B,QAAjC,IACC,oBAAC,SAAD;AAAW,IAAA,gBAAgB,EAAE8B,SAAS,CAAC7B,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EASO6B,SAAS,CAAC9B,QAAV,IACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,EAAE,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA/C,CAVR,EAYE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAEe,gBAFX;AAGE,IAAA,SAAS,EAAC,8BAHZ;AAIE,IAAA,EAAE,EAAC,cAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAZF,EAoBE,oBAAC,OAAD;AACE,IAAA,WAAW,EAAEJ,cADf;AAEE,IAAA,gBAAgB,EAAEf,gBAFpB;AAGE,IAAA,mBAAmB,EAAEC,mBAHvB;AAIE,IAAA,KAAK,EAAEH,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,EA0BG+B,MAAM,IAAIA,MAAM,CAAChC,GAAP,IAAc,GAAxB,IAA+B,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEgC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BlC,EA2BE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,EAAE,EAAC,qBAAzB;AAA+C,IAAA,SAAS,EAAC,cAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA3BF,CADF,EAgCG1C,WAAW,IACV,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE4B,cAArB;AAAqC,IAAA,MAAM,EAAEM,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjCJ,EAqCGhC,UAAU,IACT,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE8B,gBAFX;AAGE,IAAA,SAAS,EAAC,8BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAQE,oBAAC,SAAD;AACE,IAAA,gBAAgB,EACdb,MAAM,CAAC6B,IAAP,CAAY1B,KAAK,IAAIA,KAAK,CAAChB,IAAN,KAAe,MAApC,EAA4CY,OAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAtCJ,EAqDGd,cAAc,IACb,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,sBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAE6B,oBAA3B;AAAiD,IAAA,UAAU,EAAER,oBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAtDJ,EA0DG,CAACzB,WAAW,IAAIE,UAAf,IAA6BE,cAA9B,KAAiD,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1DpD,CADF;AA8DD,CAlMD;;AAoMA,eAAeR,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const [isBlurred, setIsBlurred] = useState(false);\n  const [newSetModal, setNewSetModal] = useState(false);\n  const [timesModal, setTimesModal] = useState(false);\n  const [restTimerModal, setRestTimerModal] = useState(false);\n  const [lifts, setLifts] = useState([\n    {\n      name: 'deadlift',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'squat',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'bench press',\n      sets: [\n        { weight: 100, reps: 7, rpe: 6 },\n        { weight: 115, reps: 7, rpe: 7 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 }\n      ]\n    }\n  ]);\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n  const [timers, setTimers] = useState([\n    { name: 'rest', decrement: true, started: false, finished: false, seconds: 0 }\n  ]);\n\n  //update times every second\n  useInterval(() => {\n    setTimers(\n      timers.map(timer => {\n        if (timer.started) {\n          if (timer.decrement && timer.seconds > 0) {\n            return Object.assign(timer, { seconds: timer.seconds - 1 });\n          } else if (timer.decrement) {\n            return Object.assign(timer, { finished: true });\n          } else if (!timer.decrement) {\n            return Object.assign(timer, { seconds: timer.seconds + 1 });\n          } else {\n            return timer;\n          }\n        } else {\n          return timer;\n        }\n      })\n    );\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(\n      timers.map(timer => {\n        if (timer.name === timerName) {\n          return Object.assign(timer, { seconds: newSeconds, started: true, finished: false });\n        } else {\n          return timer;\n        }\n      })\n    );\n  }\n\n  function toggleSetModal(cancel = false) {\n    if (cancel) {\n      console.log(cancel);\n      setNewSetModal(true);\n      setIsBlurred(false);\n    } else if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n      setIsBlurred(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(\n      lifts.map((lift, index) => {\n        if (index === currentLiftIndex) {\n          lift.sets = [...lift.sets, newSet];\n        }\n        return lift;\n      })\n    );\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length\n    ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n        return a.weight >= b.weight ? a : b;\n      })\n    : null;\n\n  const restTimer = timers.find(timer => timer.name === 'rest');\n\n  // Play sound when rest finishes\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n\n    }\n  }, [restTimer.finished]);\n\n  return (\n    <React.Fragment>\n      <div id=\"workout-screen\" className={test}>\n        <Link to=\"/\" className=\"upper-left\">\n          <button type=\"button\" className=\"arrow-button\">\n            &larr;\n          </button>\n        </Link>\n        {(restTimer.started && !restTimer.finished) && (\n          <RestTimer secondsRemaining={restTimer.seconds} />\n        )}\n            {restTimer.finished && (\n              <div className=\"rest-timer\" id=\"rest-finished\"><b>REST FINISHED!</b></div>\n            )}\n        <button\n          type=\"button\"\n          onClick={toggleTimesModal}\n          className=\"upper-right button-underline\"\n          id=\"times-toggle\"\n        >\n          TIMES\n        </button>\n        <LiftLog\n          toggleModal={toggleSetModal}\n          currentLiftIndex={currentLiftIndex}\n          setCurrentLiftIndex={setCurrentLiftIndex}\n          lifts={lifts}\n        />\n        {maxSet && maxSet.rpe >= 6.5 && <E1rmDisplay set={maxSet} />}\n        <button type=\"button\" id=\"lift-history-button\" className=\"arrow-button\">\n          Lift History\n        </button>\n      </div>\n      {newSetModal && (\n        <Modal toggleButton={false} id=\"set-modal\">\n          <NewSet toggleModal={toggleSetModal} addSet={addSet} />\n        </Modal>\n      )}\n      {timesModal && (\n        <Modal toggleButton={false} id=\"times-modal\">\n          <button\n            type=\"button\"\n            onClick={toggleTimesModal}\n            className=\"upper-right button-underline\"\n          >\n            TIMES\n          </button>\n          <RestTimer\n            secondsRemaining={\n              timers.find(timer => timer.name === 'rest').seconds\n            }\n          />\n        </Modal>\n      )}\n      {restTimerModal && (\n        <Modal toggleButton={false} id=\"new-rest-timer-modal\">\n          <NewRestTimer toggleModal={toggleRestTimerModal} startTimer={startIndividualTimer} />\n        </Modal>\n      )}\n      {(newSetModal || timesModal || restTimerModal) && <Backdrop />}\n    </React.Fragment>\n  );\n};\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}