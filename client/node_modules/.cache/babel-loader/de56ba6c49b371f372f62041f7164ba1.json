{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Modal.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { globalUIActions } from '../redux/slices/globalUI';\nimport './Modal.scss';\n\nconst Modal = props => {\n  const _useState = useState(props.isOpen),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const dispatch = useDispatch();\n\n  const closeModal = () => {\n    setIsOpen(false);\n    props.registerClose();\n    dispatch(globalUIActions.isBlurred(false));\n  }; // Update isOpen when props.isOpen changes\n\n\n  useEffect(() => {\n    setIsOpen(props.isOpen);\n\n    if (props.isOpen) {\n      dispatch(globalUIActions.isBlurred(true));\n    }\n  }, [props.isOpen]);\n\n  if (isOpen) {\n    return ReactDOM.createPortal(React.createElement(\"div\", {\n      className: \"modal\",\n      id: props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, props.toggleButton && React.createElement(\"button\", {\n      type: \"button\",\n      onClick: closeModal,\n      id: \"close-modal-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"X\"), React.cloneElement(props.children, {\n      closeModal: closeModal\n    })), document.getElementById('root'));\n  } else {\n    return null;\n  }\n};\n\nModal.defaultProps = {\n  toggleButton: false\n};\nexport default Modal;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Modal.js"],"names":["React","useState","useEffect","ReactDOM","useDispatch","globalUIActions","Modal","props","isOpen","setIsOpen","dispatch","closeModal","registerClose","isBlurred","createPortal","id","toggleButton","cloneElement","children","document","getElementById","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,OAAO,cAAP;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA,oBACON,QAAQ,CAACM,KAAK,CAACC,MAAP,CADf;AAAA;AAAA,QACdA,MADc;AAAA,QACNC,SADM;;AAErB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AACA,QAAMO,UAAU,GAAG,MAAM;AACvBF,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAF,IAAAA,KAAK,CAACK,aAAN;AACAF,IAAAA,QAAQ,CAACL,eAAe,CAACQ,SAAhB,CAA0B,KAA1B,CAAD,CAAR;AACD,GAJD,CAHqB,CASrB;;;AACAX,EAAAA,SAAS,CAAC,MAAK;AACbO,IAAAA,SAAS,CAACF,KAAK,CAACC,MAAP,CAAT;;AACA,QAAID,KAAK,CAACC,MAAV,EAAkB;AAChBE,MAAAA,QAAQ,CAACL,eAAe,CAACQ,SAAhB,CAA0B,IAA1B,CAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACN,KAAK,CAACC,MAAP,CALM,CAAT;;AAOA,MAAIA,MAAJ,EAAY;AACV,WAAOL,QAAQ,CAACW,YAAT,CACL;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAEP,KAAK,CAACQ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,KAAK,CAACS,YAAN,IACC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEL,UAA/B;AAA2C,MAAA,EAAE,EAAC,oBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,EAMGX,KAAK,CAACiB,YAAN,CAAmBV,KAAK,CAACW,QAAzB,EAAmC;AAAEP,MAAAA,UAAU,EAAEA;AAAd,KAAnC,CANH,CADK,EASLQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CATK,CAAP;AAWD,GAZD,MAYO;AACL,WAAO,IAAP;AACD;AACF,CAhCD;;AAkCAd,KAAK,CAACe,YAAN,GAAqB;AACnBL,EAAAA,YAAY,EAAE;AADK,CAArB;AAIA,eAAeV,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { globalUIActions } from '../redux/slices/globalUI';\n\nimport './Modal.scss';\n\nconst Modal = props => {\n  const [isOpen, setIsOpen] = useState(props.isOpen);\n  const dispatch = useDispatch();\n  const closeModal = () => {\n    setIsOpen(false);\n    props.registerClose();\n    dispatch(globalUIActions.isBlurred(false));\n  };\n\n  // Update isOpen when props.isOpen changes\n  useEffect(() =>{\n    setIsOpen(props.isOpen);\n    if (props.isOpen) {\n      dispatch(globalUIActions.isBlurred(true));\n    }\n  }, [props.isOpen]);\n\n  if (isOpen) {\n    return ReactDOM.createPortal(\n      <div className=\"modal\" id={props.id}>\n        {props.toggleButton && (\n          <button type=\"button\" onClick={closeModal} id=\"close-modal-button\">\n            X\n          </button>\n        )}\n        {React.cloneElement(props.children, { closeModal: closeModal })}\n      </div>,\n      document.getElementById('root')\n    );\n  } else {\n    return null;\n  }\n};\n\nModal.defaultProps = {\n  toggleButton: false\n};\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}