{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/Workout.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport NewLift from './NewLift';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isBlurred = _useState2[0],\n        setIsBlurred = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSetModal = _useState4[0],\n        setNewSetModal = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        modalChild = _useState6[0],\n        setModalChild = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newLiftModal = _useState8[0],\n        setNewLiftModal = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        editSetModal = _useState10[0],\n        setEditSetModal = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        timesModal = _useState12[0],\n        setTimesModal = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        restTimerModal = _useState14[0],\n        setRestTimerModal = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        liftEditable = _useState16[0],\n        setLiftEditable = _useState16[1];\n\n  const _useState17 = useState([{\n    name: 'deadlift',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'squat',\n    sets: [{\n      weight: 230,\n      reps: 5,\n      rpe: 6\n    }, {\n      weight: 245,\n      reps: 5,\n      rpe: 7\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }, {\n      weight: 255,\n      reps: 5,\n      rpe: 8\n    }]\n  }, {\n    name: 'bench press',\n    sets: [{\n      weight: 100,\n      reps: 7,\n      rpe: 6\n    }, {\n      weight: 115,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }, {\n      weight: 125,\n      reps: 7,\n      rpe: 8\n    }]\n  }]),\n        _useState18 = _slicedToArray(_useState17, 2),\n        lifts = _useState18[0],\n        setLifts = _useState18[1];\n\n  const _useState19 = useState(0),\n        _useState20 = _slicedToArray(_useState19, 2),\n        currentLiftIndex = _useState20[0],\n        setCurrentLiftIndex = _useState20[1];\n\n  const _useState21 = useState([{\n    name: 'rest',\n    decrement: true,\n    started: false,\n    finished: false,\n    seconds: 0\n  }]),\n        _useState22 = _slicedToArray(_useState21, 2),\n        timers = _useState22[0],\n        setTimers = _useState22[1]; //update times every second\n\n\n  useInterval(() => {\n    setTimers(timers.map(timer => {\n      if (timer.started) {\n        if (timer.decrement && timer.seconds > 0) {\n          return Object.assign(timer, {\n            seconds: timer.seconds - 1\n          });\n        } else if (timer.decrement) {\n          return Object.assign(timer, {\n            finished: true\n          });\n        } else if (!timer.decrement) {\n          return Object.assign(timer, {\n            seconds: timer.seconds + 1\n          });\n        } else {\n          return timer;\n        }\n      } else {\n        return timer;\n      }\n    }));\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(timers.map(timer => {\n      if (timer.name === timerName) {\n        return Object.assign(timer, {\n          seconds: newSeconds,\n          started: true,\n          finished: false\n        });\n      } else {\n        return timer;\n      }\n    }));\n  }\n\n  function closeSetModal() {\n    setNewSetModal(false);\n    setIsBlurred(false);\n  }\n\n  function toggleSetModal() {\n    if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n      setIsBlurred(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleNewLiftModal() {\n    setNewLiftModal(!newLiftModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n    setLifts(lifts.map((lift, index) => {\n      if (index === currentLiftIndex) {\n        lift.sets = [...lift.sets, newSet];\n      }\n\n      return lift;\n    }));\n  }\n\n  function addLift(newLift) {\n    setLifts([{\n      name: newLift,\n      sets: []\n    }, ...lifts]);\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n    return a.weight >= b.weight ? a : b;\n  }) : null;\n  const restTimer = timers.find(timer => timer.name === 'rest'); // Play sound when rest finishes\n\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n    }\n  }, [restTimer.finished]);\n  useEffect(() => {\n    if (editSetModal) {\n      setIsBlurred(true);\n    } else {\n      setIsBlurred(false);\n    }\n  }, [editSetModal]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    id: \"workout-screen\",\n    className: test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"\\u2190\")), restTimer.started && !restTimer.finished && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), restTimer.finished && React.createElement(\"div\", {\n    className: \"rest-timer\",\n    id: \"rest-finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"REST FINISHED!\")), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    id: \"times-toggle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"TIMES\"), React.createElement(LiftLog, {\n    liftEditable: liftEditable,\n    setLiftEditable: setLiftEditable,\n    setEditSetModal: setEditSetModal,\n    toggleSetModal: toggleSetModal,\n    toggleNewLiftModal: toggleNewLiftModal,\n    currentLiftIndex: currentLiftIndex,\n    setCurrentLiftIndex: setCurrentLiftIndex,\n    lifts: lifts,\n    setModalChild: setModalChild,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), maxSet && maxSet.rpe >= 6.5 && React.createElement(E1rmDisplay, {\n    set: maxSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"lift-history-button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Lift History\")), React.createElement(Modal, {\n    toggleButton: false,\n    id: \"test-modal\",\n    showModal: modalChild,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), newSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(NewSet, {\n    closeModal: closeSetModal,\n    toggleModal: toggleSetModal,\n    addSet: addSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })), timesModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"times-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggleTimesModal,\n    className: \"upper-right button-underline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, \"TIMES\"), restTimer.started && React.createElement(RestTimer, {\n    secondsRemaining: restTimer.seconds,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  })), restTimerModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"new-rest-timer-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(NewRestTimer, {\n    toggleModal: toggleRestTimerModal,\n    startTimer: startIndividualTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  })), newLiftModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"new-lift-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(NewLift, {\n    toggleModal: toggleNewLiftModal,\n    addLift: addLift,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  })), editSetModal && React.createElement(Modal, {\n    toggleButton: false,\n    id: \"edit-set-modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \"Edit A Set HERE\"), (newSetModal || timesModal || restTimerModal || newLiftModal || editSetModal) && React.createElement(Backdrop, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }));\n};\n\nexport default Workout;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/Workout.js"],"names":["React","useState","useEffect","Link","LiftLog","Modal","Backdrop","NewSet","E1rmDisplay","RestTimer","useInterval","NewRestTimer","NewLift","soundFile","Workout","props","isBlurred","setIsBlurred","newSetModal","setNewSetModal","modalChild","setModalChild","newLiftModal","setNewLiftModal","editSetModal","setEditSetModal","timesModal","setTimesModal","restTimerModal","setRestTimerModal","liftEditable","setLiftEditable","name","sets","weight","reps","rpe","lifts","setLifts","currentLiftIndex","setCurrentLiftIndex","decrement","started","finished","seconds","timers","setTimers","map","timer","Object","assign","startIndividualTimer","timerName","newSeconds","closeSetModal","toggleSetModal","toggleTimesModal","toggleRestTimerModal","toggleNewLiftModal","addSet","newWeight","newReps","newRpe","newSet","lift","index","addLift","newLift","test","maxSet","length","reduce","a","b","restTimer","find","sound","Audio","src","play"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,gBAAP;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA,oBACWd,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,QAChBe,SADgB;AAAA,QACLC,YADK;;AAAA,qBAEehB,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAEhBiB,WAFgB;AAAA,QAEHC,cAFG;;AAAA,qBAGalB,QAAQ,CAAC,IAAD,CAHrB;AAAA;AAAA,QAGhBmB,UAHgB;AAAA,QAGJC,aAHI;;AAAA,qBAIiBpB,QAAQ,CAAC,KAAD,CAJzB;AAAA;AAAA,QAIhBqB,YAJgB;AAAA,QAIFC,eAJE;;AAAA,qBAKiBtB,QAAQ,CAAC,KAAD,CALzB;AAAA;AAAA,QAKhBuB,YALgB;AAAA,QAKFC,eALE;;AAAA,sBAMaxB,QAAQ,CAAC,KAAD,CANrB;AAAA;AAAA,QAMhByB,UANgB;AAAA,QAMJC,aANI;;AAAA,sBAOqB1B,QAAQ,CAAC,KAAD,CAP7B;AAAA;AAAA,QAOhB2B,cAPgB;AAAA,QAOAC,iBAPA;;AAAA,sBAQiB5B,QAAQ,CAAC,KAAD,CARzB;AAAA;AAAA,QAQhB6B,YARgB;AAAA,QAQFC,eARE;;AAAA,sBASG9B,QAAQ,CAAC,CACjC;AACE+B,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI;AAFR,GADiC,EAUjC;AACEJ,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI;AAFR,GAViC,EAmBjC;AACEJ,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADI,EAEJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAFI,EAGJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAHI,EAIJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KAJI,EAKJ;AAAEF,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,IAAI,EAAE,CAArB;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KALI;AAFR,GAnBiC,CAAD,CATX;AAAA;AAAA,QAShBC,KATgB;AAAA,QASTC,QATS;;AAAA,sBAuCyBrC,QAAQ,CAAC,CAAD,CAvCjC;AAAA;AAAA,QAuChBsC,gBAvCgB;AAAA,QAuCEC,mBAvCF;;AAAA,sBAwCKvC,QAAQ,CAAC,CACnC;AACE+B,IAAAA,IAAI,EAAE,MADR;AAEES,IAAAA,SAAS,EAAE,IAFb;AAGEC,IAAAA,OAAO,EAAE,KAHX;AAIEC,IAAAA,QAAQ,EAAE,KAJZ;AAKEC,IAAAA,OAAO,EAAE;AALX,GADmC,CAAD,CAxCb;AAAA;AAAA,QAwChBC,MAxCgB;AAAA,QAwCRC,SAxCQ,mBAkDvB;;;AACApC,EAAAA,WAAW,CAAC,MAAM;AAChBoC,IAAAA,SAAS,CACPD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AAClB,UAAIA,KAAK,CAACN,OAAV,EAAmB;AACjB,YAAIM,KAAK,CAACP,SAAN,IAAmBO,KAAK,CAACJ,OAAN,GAAgB,CAAvC,EAA0C;AACxC,iBAAOK,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEJ,YAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAA3B,WAArB,CAAP;AACD,SAFD,MAEO,IAAII,KAAK,CAACP,SAAV,EAAqB;AAC1B,iBAAOQ,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEL,YAAAA,QAAQ,EAAE;AAAZ,WAArB,CAAP;AACD,SAFM,MAEA,IAAI,CAACK,KAAK,CAACP,SAAX,EAAsB;AAC3B,iBAAOQ,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEJ,YAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,GAAgB;AAA3B,WAArB,CAAP;AACD,SAFM,MAEA;AACL,iBAAOI,KAAP;AACD;AACF,OAVD,MAUO;AACL,eAAOA,KAAP;AACD;AACF,KAdD,CADO,CAAT;AAiBD,GAlBU,EAkBR,IAlBQ,CAAX;;AAoBA,WAASG,oBAAT,CAA8BC,SAA9B,EAAyCC,UAAzC,EAAqD;AACnDP,IAAAA,SAAS,CACPD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AAClB,UAAIA,KAAK,CAAChB,IAAN,KAAeoB,SAAnB,EAA8B;AAC5B,eAAOH,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAC1BJ,UAAAA,OAAO,EAAES,UADiB;AAE1BX,UAAAA,OAAO,EAAE,IAFiB;AAG1BC,UAAAA,QAAQ,EAAE;AAHgB,SAArB,CAAP;AAKD,OAND,MAMO;AACL,eAAOK,KAAP;AACD;AACF,KAVD,CADO,CAAT;AAaD;;AAED,WAASM,aAAT,GAAyB;AACvBnC,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,WAASsC,cAAT,GAA0B;AACxB,QAAIrC,WAAJ,EAAiB;AACfC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAU,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAHD,MAGO;AACLV,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF;;AAED,WAASuC,gBAAT,GAA4B;AAC1B7B,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAT,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASyC,oBAAT,GAAgC;AAC9B5B,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACAX,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAAS0C,kBAAT,GAA8B;AAC5BnC,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACAL,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAAS2C,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4C;AAC1C,UAAMC,MAAM,GAAG;AACb7B,MAAAA,MAAM,EAAE0B,SADK;AAEbzB,MAAAA,IAAI,EAAE0B,OAFO;AAGbzB,MAAAA,GAAG,EAAE0B;AAHQ,KAAf;AAMAxB,IAAAA,QAAQ,CACND,KAAK,CAACU,GAAN,CAAU,CAACiB,IAAD,EAAOC,KAAP,KAAiB;AACzB,UAAIA,KAAK,KAAK1B,gBAAd,EAAgC;AAC9ByB,QAAAA,IAAI,CAAC/B,IAAL,GAAY,CAAC,GAAG+B,IAAI,CAAC/B,IAAT,EAAe8B,MAAf,CAAZ;AACD;;AACD,aAAOC,IAAP;AACD,KALD,CADM,CAAR;AAQD;;AAED,WAASE,OAAT,CAAiBC,OAAjB,EAA0B;AACxB7B,IAAAA,QAAQ,CAAC,CAAC;AAAEN,MAAAA,IAAI,EAAEmC,OAAR;AAAiBlC,MAAAA,IAAI,EAAE;AAAvB,KAAD,EAA8B,GAAGI,KAAjC,CAAD,CAAR;AACD;;AAED,QAAM+B,IAAI,GAAGpD,SAAS,GAAG,SAAH,GAAe,EAArC;AACA,QAAMqD,MAAM,GAAGhC,KAAK,CAACE,gBAAD,CAAL,CAAwBN,IAAxB,CAA6BqC,MAA7B,GACXjC,KAAK,CAACE,gBAAD,CAAL,CAAwBN,IAAxB,CAA6BsC,MAA7B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5C,WAAOD,CAAC,CAACtC,MAAF,IAAYuC,CAAC,CAACvC,MAAd,GAAuBsC,CAAvB,GAA2BC,CAAlC;AACD,GAFD,CADW,GAIX,IAJJ;AAMA,QAAMC,SAAS,GAAG7B,MAAM,CAAC8B,IAAP,CAAY3B,KAAK,IAAIA,KAAK,CAAChB,IAAN,KAAe,MAApC,CAAlB,CAjJuB,CAmJvB;;AACA9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwE,SAAS,CAAC/B,QAAd,EAAwB;AACtB,YAAMiC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,GAAYjE,SAAZ;AACA+D,MAAAA,KAAK,CAACG,IAAN;AACD;AACF,GANQ,EAMN,CAACL,SAAS,CAAC/B,QAAX,CANM,CAAT;AAQAzC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,YAAJ,EAAkB;AAChBP,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GANQ,EAMN,CAACO,YAAD,CANM,CAAT;AAQA,SACE,0CACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAyB,IAAA,SAAS,EAAE4C,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAa,IAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,EAMGM,SAAS,CAAChC,OAAV,IAAqB,CAACgC,SAAS,CAAC/B,QAAhC,IACC,oBAAC,SAAD;AAAW,IAAA,gBAAgB,EAAE+B,SAAS,CAAC9B,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EASG8B,SAAS,CAAC/B,QAAV,IACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,EAAE,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAVJ,EAcE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAEa,gBAFX;AAGE,IAAA,SAAS,EAAC,8BAHZ;AAIE,IAAA,EAAE,EAAC,cAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAdF,EAsBE,oBAAC,OAAD;AACE,IAAA,YAAY,EAAE1B,YADhB;AAEE,IAAA,eAAe,EAAEC,eAFnB;AAGE,IAAA,eAAe,EAAEN,eAHnB;AAIE,IAAA,cAAc,EAAE8B,cAJlB;AAKE,IAAA,kBAAkB,EAAEG,kBALtB;AAME,IAAA,gBAAgB,EAAEnB,gBANpB;AAOE,IAAA,mBAAmB,EAAEC,mBAPvB;AAQE,IAAA,KAAK,EAAEH,KART;AASE,IAAA,aAAa,EAAEhB,aATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,EAiCGgD,MAAM,IAAIA,MAAM,CAACjC,GAAP,IAAc,GAAxB,IAA+B,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEiC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjClC,EAkCE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,EAAE,EAAC,qBAAzB;AAA+C,IAAA,SAAS,EAAC,cAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlCF,CADF,EAuCA,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,YAA/B;AAA4C,IAAA,SAAS,EAAEjD,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvCA,EA0CGF,WAAW,IACV,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,UAAU,EAAEoC,aADd;AAEE,IAAA,WAAW,EAAEC,cAFf;AAGE,IAAA,MAAM,EAAEI,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA3CJ,EAmDGjC,UAAU,IACT,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE8B,gBAFX;AAGE,IAAA,SAAS,EAAC,8BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAQGkB,SAAS,CAAChC,OAAV,IACC,oBAAC,SAAD;AAAW,IAAA,gBAAgB,EAAEgC,SAAS,CAAC9B,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CApDJ,EAiEGhB,cAAc,IACb,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,sBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACE,IAAA,WAAW,EAAE6B,oBADf;AAEE,IAAA,UAAU,EAAEN,oBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlEJ,EAyEG7B,YAAY,IACX,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,gBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,WAAW,EAAEoC,kBAAtB;AAA0C,IAAA,OAAO,EAAEQ,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA1EJ,EA8EC1C,YAAY,IACX,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAE,KAArB;AAA4B,IAAA,EAAE,EAAC,gBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA/EF,EAmFG,CAACN,WAAW,IAAIQ,UAAf,IAA6BE,cAA7B,IAA+CN,YAA/C,IAA+DE,YAAhE,KACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApFJ,CADF;AAyFD,CA7PD;;AA+PA,eAAeV,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport LiftLog from './LiftLog';\nimport Modal from './Modal';\nimport Backdrop from './Backdrop';\nimport NewSet from './NewSet';\nimport E1rmDisplay from './E1rmDisplay';\nimport RestTimer from './RestTimer';\nimport useInterval from '../utils/useInterval';\nimport NewRestTimer from './NewRestTimer';\nimport NewLift from './NewLift';\nimport soundFile from '../assets/audio/bell.wav';\nimport './Workout.scss';\n\nconst Workout = props => {\n  const [isBlurred, setIsBlurred] = useState(false);\n  const [newSetModal, setNewSetModal] = useState(false);\n  const [modalChild, setModalChild] = useState(null);\n  const [newLiftModal, setNewLiftModal] = useState(false);\n  const [editSetModal, setEditSetModal] = useState(false);\n  const [timesModal, setTimesModal] = useState(false);\n  const [restTimerModal, setRestTimerModal] = useState(false);\n  const [liftEditable, setLiftEditable] = useState(false);\n  const [lifts, setLifts] = useState([\n    {\n      name: 'deadlift',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'squat',\n      sets: [\n        { weight: 230, reps: 5, rpe: 6 },\n        { weight: 245, reps: 5, rpe: 7 },\n        { weight: 255, reps: 5, rpe: 8 },\n        { weight: 255, reps: 5, rpe: 8 }\n      ]\n    },\n    {\n      name: 'bench press',\n      sets: [\n        { weight: 100, reps: 7, rpe: 6 },\n        { weight: 115, reps: 7, rpe: 7 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 },\n        { weight: 125, reps: 7, rpe: 8 }\n      ]\n    }\n  ]);\n  const [currentLiftIndex, setCurrentLiftIndex] = useState(0);\n  const [timers, setTimers] = useState([\n    {\n      name: 'rest',\n      decrement: true,\n      started: false,\n      finished: false,\n      seconds: 0\n    }\n  ]);\n\n  //update times every second\n  useInterval(() => {\n    setTimers(\n      timers.map(timer => {\n        if (timer.started) {\n          if (timer.decrement && timer.seconds > 0) {\n            return Object.assign(timer, { seconds: timer.seconds - 1 });\n          } else if (timer.decrement) {\n            return Object.assign(timer, { finished: true });\n          } else if (!timer.decrement) {\n            return Object.assign(timer, { seconds: timer.seconds + 1 });\n          } else {\n            return timer;\n          }\n        } else {\n          return timer;\n        }\n      })\n    );\n  }, 1000);\n\n  function startIndividualTimer(timerName, newSeconds) {\n    setTimers(\n      timers.map(timer => {\n        if (timer.name === timerName) {\n          return Object.assign(timer, {\n            seconds: newSeconds,\n            started: true,\n            finished: false\n          });\n        } else {\n          return timer;\n        }\n      })\n    );\n  }\n\n  function closeSetModal() {\n    setNewSetModal(false);\n    setIsBlurred(false);\n  }\n\n  function toggleSetModal() {\n    if (newSetModal) {\n      setNewSetModal(false);\n      setRestTimerModal(true);\n    } else {\n      setNewSetModal(true);\n      setIsBlurred(true);\n    }\n  }\n\n  function toggleTimesModal() {\n    setTimesModal(!timesModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleRestTimerModal() {\n    setRestTimerModal(!restTimerModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function toggleNewLiftModal() {\n    setNewLiftModal(!newLiftModal);\n    setIsBlurred(!isBlurred);\n  }\n\n  function addSet(newWeight, newReps, newRpe) {\n    const newSet = {\n      weight: newWeight,\n      reps: newReps,\n      rpe: newRpe\n    };\n\n    setLifts(\n      lifts.map((lift, index) => {\n        if (index === currentLiftIndex) {\n          lift.sets = [...lift.sets, newSet];\n        }\n        return lift;\n      })\n    );\n  }\n\n  function addLift(newLift) {\n    setLifts([{ name: newLift, sets: [] }, ...lifts]);\n  }\n\n  const test = isBlurred ? 'blurred' : '';\n  const maxSet = lifts[currentLiftIndex].sets.length\n    ? lifts[currentLiftIndex].sets.reduce((a, b) => {\n        return a.weight >= b.weight ? a : b;\n      })\n    : null;\n\n  const restTimer = timers.find(timer => timer.name === 'rest');\n\n  // Play sound when rest finishes\n  useEffect(() => {\n    if (restTimer.finished) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n    }\n  }, [restTimer.finished]);\n\n  useEffect(() => {\n    if (editSetModal) {\n      setIsBlurred(true);\n    } else {\n      setIsBlurred(false);\n    }\n  }, [editSetModal]);\n\n  return (\n    <>\n      <div id=\"workout-screen\" className={test}>\n        <Link to=\"/\" className=\"upper-left\">\n          <button type=\"button\" className=\"arrow-button\">\n            &larr;\n          </button>\n        </Link>\n        {restTimer.started && !restTimer.finished && (\n          <RestTimer secondsRemaining={restTimer.seconds} />\n        )}\n        {restTimer.finished && (\n          <div className=\"rest-timer\" id=\"rest-finished\">\n            <b>REST FINISHED!</b>\n          </div>\n        )}\n        <button\n          type=\"button\"\n          onClick={toggleTimesModal}\n          className=\"upper-right button-underline\"\n          id=\"times-toggle\"\n        >\n          TIMES\n        </button>\n        <LiftLog\n          liftEditable={liftEditable}\n          setLiftEditable={setLiftEditable}\n          setEditSetModal={setEditSetModal}\n          toggleSetModal={toggleSetModal}\n          toggleNewLiftModal={toggleNewLiftModal}\n          currentLiftIndex={currentLiftIndex}\n          setCurrentLiftIndex={setCurrentLiftIndex}\n          lifts={lifts}\n          setModalChild={setModalChild}\n        />\n        {maxSet && maxSet.rpe >= 6.5 && <E1rmDisplay set={maxSet} />}\n        <button type=\"button\" id=\"lift-history-button\" className=\"arrow-button\">\n          Lift History\n        </button>\n      </div>\n    <Modal toggleButton={false} id=\"test-modal\" showModal={modalChild}>\n        \n    </Modal>\n      {newSetModal && (\n        <Modal toggleButton={false} id=\"set-modal\">\n          <NewSet\n            closeModal={closeSetModal}\n            toggleModal={toggleSetModal}\n            addSet={addSet}\n          />\n        </Modal>\n      )}\n      {timesModal && (\n        <Modal toggleButton={false} id=\"times-modal\">\n          <button\n            type=\"button\"\n            onClick={toggleTimesModal}\n            className=\"upper-right button-underline\"\n          >\n            TIMES\n          </button>\n          {restTimer.started && (\n            <RestTimer secondsRemaining={restTimer.seconds} />\n          )}\n        </Modal>\n      )}\n      {restTimerModal && (\n        <Modal toggleButton={false} id=\"new-rest-timer-modal\">\n          <NewRestTimer\n            toggleModal={toggleRestTimerModal}\n            startTimer={startIndividualTimer}\n          />\n        </Modal>\n      )}\n      {newLiftModal && (\n        <Modal toggleButton={false} id=\"new-lift-modal\">\n          <NewLift toggleModal={toggleNewLiftModal} addLift={addLift}/>\n        </Modal>\n      )}\n    {editSetModal && (\n      <Modal toggleButton={false} id=\"edit-set-modal\">\n          Edit A Set HERE\n      </Modal>\n    )}\n      {(newSetModal || timesModal || restTimerModal || newLiftModal || editSetModal) && (\n        <Backdrop />\n      )}\n    </>\n  );\n};\n\nexport default Workout;\n"]},"metadata":{},"sourceType":"module"}