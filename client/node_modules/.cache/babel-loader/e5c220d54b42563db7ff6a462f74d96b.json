{"ast":null,"code":"var _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/SingleMeasurementView.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getE1RMHistoryForLift } from '../redux/slices/liftHistory';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';\nimport './SingleMeasurementView.scss';\n\nconst SingleMeasurementView = props => {\n  const liftName = props.match.params.dataItem;\n  const unit = props.location.state.unit;\n  let selector;\n  let selectorProps;\n\n  if (unit === 'e1rm') {\n    selector = getE1RMHistoryForLift;\n    selectorProps = {\n      liftName: liftName\n    };\n  }\n\n  const liftHistory = useSelector(state => selector(state, selectorProps));\n\n  function formatDate(timestamp) {\n    let date = new Date(timestamp);\n    return date.getMonth() + '/' + date.getDate();\n  }\n\n  liftHistory.forEach(entry => entry.timestamp = formatDate(entry.timestamp));\n  return React.createElement(\"div\", {\n    id: \"single-measurement-view\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/view\",\n    className: \"upper-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"\\u2190\")), React.createElement(\"h1\", {\n    className: \"lift-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, liftName.toUpperCase()), React.createElement(\"div\", {\n    className: \"graph-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(ResponsiveContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    data: liftHistory,\n    margin: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Line, {\n    dataKey: \"e1rm\",\n    stroke: \"rgba(255, 255, 255, .8)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"timestamp\",\n    stroke: \"rgba(255, 255, 255, 1)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    type: \"number\",\n    domain: ['dataMin - 50', 'dataMax + 50'],\n    width: 35,\n    stroke: \"rgba(255, 255, 255, 1)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    contentStyle: {\n      backgroundColor: 'rgba(50, 50, 50, .85)',\n      border: '1px solid rgba(255, 255, 255, .3)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })))), React.createElement(\"table\", {\n    id: \"e1rm-table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"DATE\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, unit.toUpperCase()))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, liftHistory.map(entry => React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, entry.timestamp), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, entry.e1rm))))));\n};\n\nexport default SingleMeasurementView;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/SingleMeasurementView.js"],"names":["React","Link","useSelector","getE1RMHistoryForLift","ResponsiveContainer","LineChart","Line","XAxis","YAxis","Tooltip","SingleMeasurementView","props","liftName","match","params","dataItem","unit","location","state","selector","selectorProps","liftHistory","formatDate","timestamp","date","Date","getMonth","getDate","forEach","entry","toUpperCase","top","right","bottom","left","backgroundColor","border","map","e1rm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getE1RMHistoryForLift } from '../redux/slices/liftHistory';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts';\nimport './SingleMeasurementView.scss';\n\nconst SingleMeasurementView = props => {\n  const liftName = props.match.params.dataItem;\n  const unit = props.location.state.unit;\n  let selector;\n  let selectorProps;\n  if (unit === 'e1rm') {\n    selector = getE1RMHistoryForLift;\n    selectorProps = { liftName: liftName };\n  }\n  const liftHistory = useSelector(state => selector(state, selectorProps));\n  function formatDate(timestamp) {\n    let date = new Date(timestamp);\n    return date.getMonth() + '/' + date.getDate();\n  }\n  liftHistory.forEach(entry => (entry.timestamp = formatDate(entry.timestamp)));\n  return (\n    <div id=\"single-measurement-view\">\n      <Link to=\"/view\" className=\"upper-left\">\n        <button type=\"button\" className=\"arrow-button\">\n          &larr;\n        </button>\n      </Link>\n      <h1 className=\"lift-title\">{liftName.toUpperCase()}</h1>\n      <div className=\"graph-area\">\n        <ResponsiveContainer>\n          <LineChart\n            data={liftHistory}\n            margin={{ top: 0, right: 5, bottom: 0, left: 0 }}\n          >\n            <Line dataKey=\"e1rm\" stroke=\"rgba(255, 255, 255, .8)\" />\n            <XAxis dataKey=\"timestamp\" stroke=\"rgba(255, 255, 255, 1)\" />\n            <YAxis\n              type=\"number\"\n              domain={['dataMin - 50', 'dataMax + 50']}\n              width={35}\n              stroke=\"rgba(255, 255, 255, 1)\"\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: 'rgba(50, 50, 50, .85)',\n                border: '1px solid rgba(255, 255, 255, .3)'\n              }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      <table id=\"e1rm-table\">\n        <thead>\n          <tr>\n            <th>DATE</th>\n            <th>{unit.toUpperCase()}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {liftHistory.map(entry => (\n            <tr>\n              <td>{entry.timestamp}</td>\n              <td>{entry.e1rm}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default SingleMeasurementView;\n"]},"metadata":{},"sourceType":"module"}