{"ast":null,"code":"var _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/LiftLog.js\";\nimport React from 'react';\nimport NewSet from './NewSet';\nimport './LiftLog.scss';\n\nconst LiftLog = props => {\n  function selectPreviousLift() {\n    if (props.currentLiftIndex < props.lifts.length - 1) {\n      props.setCurrentLiftIndex(props.currentLiftIndex + 1);\n    }\n  }\n\n  function selectNextLift() {\n    if (props.currentLiftIndex > 0) {\n      props.setCurrentLiftIndex(props.currentLiftIndex - 1);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    id: \"lift-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(LiftSelector, {\n    atEnd: props.currentLiftIndex === props.lifts.length - 1,\n    atBeginning: props.currentLiftIndex === 0,\n    currentLift: props.lifts[props.currentLiftIndex],\n    selectPreviousLift: selectPreviousLift,\n    selectNextLift: selectNextLift,\n    toggleNewLiftModal: props.toggleNewLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(InfoDisplay, {\n    liftEditable: props.liftEditable,\n    setEditSetModal: props.setEditSetModal,\n    sets: props.lifts[props.currentLiftIndex].sets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"edit-lift\",\n    onClick: () => props.setLiftEditable(!props.liftEditable),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"EDIT\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => {\n      props.setModalChild(React.createElement(NewSet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    },\n    className: \"arrow-button\",\n    id: \"add-set-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"\\uFF0B\"));\n};\n\nconst LiftSelector = props => {\n  return React.createElement(\"div\", {\n    id: \"lift-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, !props.atEnd ? React.createElement(\"button\", {\n    type: \"button\",\n    onClick: props.selectPreviousLift,\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"\\u2190\") : null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.currentLift.name.toUpperCase()), props.atBeginning ? React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    onClick: props.toggleNewLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"\\uFF0B\") : React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    onClick: props.selectNextLift,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"\\u2192\"));\n};\n\nconst InfoDisplay = props => {\n  const setList = props.sets.map((set, index) => React.createElement(\"div\", {\n    className: \"set\",\n    key: index,\n    onClick: props.liftEditable ? () => props.setEditSetModal(true) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"set-weight grid-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, set.weight), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"lbs\")), React.createElement(\"div\", {\n    className: \"set-reps\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, set.reps), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"reps\")), React.createElement(\"div\", {\n    className: \"set-rpe grid-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"@\"), \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, set.rpe))));\n  return React.createElement(\"div\", {\n    id: \"info-display\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, setList);\n};\n\nexport default LiftLog;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/LiftLog.js"],"names":["React","NewSet","LiftLog","props","selectPreviousLift","currentLiftIndex","lifts","length","setCurrentLiftIndex","selectNextLift","toggleNewLiftModal","liftEditable","setEditSetModal","sets","setLiftEditable","setModalChild","LiftSelector","atEnd","currentLift","name","toUpperCase","atBeginning","InfoDisplay","setList","map","set","index","weight","reps","rpe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NewSet from './NewSet';\nimport './LiftLog.scss';\n\nconst LiftLog = props => {\n  function selectPreviousLift() {\n    if (props.currentLiftIndex < props.lifts.length - 1) {\n      props.setCurrentLiftIndex(props.currentLiftIndex + 1);\n    }\n  }\n\n  function selectNextLift() {\n    if (props.currentLiftIndex > 0) {\n      props.setCurrentLiftIndex(props.currentLiftIndex - 1);\n    }\n  }\n  return (\n    <div id=\"lift-log\">\n      <LiftSelector\n        atEnd={props.currentLiftIndex === props.lifts.length - 1}\n        atBeginning={props.currentLiftIndex === 0}\n        currentLift={props.lifts[props.currentLiftIndex]}\n        selectPreviousLift={selectPreviousLift}\n        selectNextLift={selectNextLift}\n        toggleNewLiftModal={props.toggleNewLiftModal}\n      />\n      <InfoDisplay\n        liftEditable={props.liftEditable}\n        setEditSetModal={props.setEditSetModal}\n        sets={props.lifts[props.currentLiftIndex].sets}\n      />\n      <button\n        type=\"button\"\n        id=\"edit-lift\"\n        onClick={() => props.setLiftEditable(!props.liftEditable)}\n      >\n        EDIT\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          props.setModalChild(\n            <NewSet />\n          );\n        }}\n        className=\"arrow-button\"\n        id=\"add-set-button\"\n      >\n        &#65291;\n      </button>\n    </div>\n  );\n};\n\nconst LiftSelector = props => {\n  return (\n    <div id=\"lift-selector\">\n      {!props.atEnd ? (\n        <button\n          type=\"button\"\n          onClick={props.selectPreviousLift}\n          className=\"arrow-button\"\n        >\n          &larr;\n        </button>\n      ) : null}\n      <h2>{props.currentLift.name.toUpperCase()}</h2>\n      {props.atBeginning ? (\n        <button\n          type=\"button\"\n          className=\"arrow-button\"\n          onClick={props.toggleNewLiftModal}\n        >\n          &#65291;\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"arrow-button\"\n          onClick={props.selectNextLift}\n        >\n          &rarr;\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst InfoDisplay = props => {\n  const setList = props.sets.map((set, index) => (\n    <div\n      className=\"set\"\n      key={index}\n      onClick={props.liftEditable ? () => props.setEditSetModal(true) : null}\n    >\n      <div className=\"set-weight grid-left\">\n        <b>{set.weight}</b> <span>lbs</span>\n      </div>\n      <div className=\"set-reps\">\n        <b>{set.reps}</b> <span>reps</span>\n      </div>\n      <div className=\"set-rpe grid-left\">\n        <span>@</span> <b>{set.rpe}</b>\n      </div>\n    </div>\n  ));\n  return <div id=\"info-display\">{setList}</div>;\n};\n\nexport default LiftLog;\n"]},"metadata":{},"sourceType":"module"}