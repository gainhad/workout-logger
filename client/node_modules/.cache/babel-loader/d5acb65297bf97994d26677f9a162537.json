{"ast":null,"code":"var _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/LiftLog.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addLift, getCurrentLift, incrementCurrentLiftIndex, decrementCurrentLiftIndex } from '../redux/slices/currentWorkout';\n\nconst LiftLog = props => {\n  console.log(props);\n\n  function selectPreviousLift() {\n    if (props.currentLiftIndex < props.lifts.length - 1) {\n      props.setCurrentLiftIndex(props.currentLiftIndex + 1);\n    }\n  }\n\n  function selectNextLift() {\n    if (props.currentLiftIndex > 0) {\n      props.setCurrentLiftIndex(props.currentLiftIndex - 1);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    id: \"lift-log\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(LiftSelector, {\n    atEnd: props.currentLiftIndex === props.lifts.length - 1,\n    atBeginning: props.currentLiftIndex === 0,\n    currentLift: props.lift,\n    selectPreviousLift: props.selectPreviousLift,\n    selectNextLift: props.selectNextLift,\n    toggleNewLiftModal: props.toggleNewLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(InfoDisplay, {\n    editable: props.liftEditable,\n    setEditSetModal: props.setEditSetModal,\n    sets: props.lift.sets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    id: \"edit-button\",\n    onClick: props.toggleEditLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"EDIT\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => props.addLift({\n      name: 'test'\n    }),\n    className: \"arrow-button\",\n    id: \"add-set-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"\\uFF0B\"));\n};\n\nconst LiftSelector = props => {\n  return React.createElement(\"div\", {\n    id: \"lift-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, !props.atEnd ? React.createElement(\"button\", {\n    type: \"button\",\n    onClick: props.selectPreviousLift,\n    className: \"arrow-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"\\u2190\") : null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, props.currentLift.name.toUpperCase()), props.atBeginning ? React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    onClick: props.toggleNewLiftModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"\\uFF0B\") : React.createElement(\"button\", {\n    type: \"button\",\n    className: \"arrow-button\",\n    onClick: props.selectNextLift,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"\\u2192\"));\n};\n\nconst InfoDisplay = props => {\n  const setList = props.sets.map((set, index) => React.createElement(\"div\", {\n    className: props.editable ? 'set editable' : 'set',\n    key: index,\n    onClick: () => props.editable ? props.setEditSetModal({\n      display: true,\n      index: index\n    }) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"set-weight grid-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, set.weight), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"lbs\")), React.createElement(\"div\", {\n    className: \"set-reps\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, set.reps), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"reps\")), React.createElement(\"div\", {\n    className: \"set-rpe grid-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"@\"), \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, set.rpe))));\n  return React.createElement(\"div\", {\n    id: \"info-display\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, setList);\n};\n\nconst mapStateToProps = state => {\n  return {\n    lift: getCurrentLift(state)\n  };\n};\n\nconst matchDispatchToProps = {\n  addLift,\n  incrementCurrentLiftIndex,\n  decrementCurrentLiftIndex\n};\nexport default connect(mapStateToProps, matchDispatchToProps)(LiftLog);","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/LiftLog.js"],"names":["React","connect","addLift","getCurrentLift","incrementCurrentLiftIndex","decrementCurrentLiftIndex","LiftLog","props","console","log","selectPreviousLift","currentLiftIndex","lifts","length","setCurrentLiftIndex","selectNextLift","lift","toggleNewLiftModal","liftEditable","setEditSetModal","sets","toggleEditLiftModal","name","LiftSelector","atEnd","currentLift","toUpperCase","atBeginning","InfoDisplay","setList","map","set","index","editable","display","weight","reps","rpe","mapStateToProps","state","matchDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  addLift,\n  getCurrentLift,\n  incrementCurrentLiftIndex,\n  decrementCurrentLiftIndex\n} from '../redux/slices/currentWorkout';\n\nconst LiftLog = props => {\n  console.log(props);\n  function selectPreviousLift() {\n    if (props.currentLiftIndex < props.lifts.length - 1) {\n      props.setCurrentLiftIndex(props.currentLiftIndex + 1);\n    }\n  }\n\n  function selectNextLift() {\n    if (props.currentLiftIndex > 0) {\n      props.setCurrentLiftIndex(props.currentLiftIndex - 1);\n    }\n  }\n  return (\n    <div id=\"lift-log\">\n      <LiftSelector\n        atEnd={props.currentLiftIndex === props.lifts.length - 1}\n        atBeginning={props.currentLiftIndex === 0}\n        currentLift={props.lift}\n        selectPreviousLift={props.selectPreviousLift}\n        selectNextLift={props.selectNextLift}\n        toggleNewLiftModal={props.toggleNewLiftModal}\n      />\n      <InfoDisplay\n        editable={props.liftEditable}\n        setEditSetModal={props.setEditSetModal}\n        sets={props.lift.sets}\n      />\n      <button\n        type=\"button\"\n        id=\"edit-button\"\n        onClick={props.toggleEditLiftModal}\n      >\n        EDIT\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => props.addLift({ name: 'test' })}\n        className=\"arrow-button\"\n        id=\"add-set-button\"\n      >\n        &#65291;\n      </button>\n    </div>\n  );\n};\n\nconst LiftSelector = props => {\n  return (\n    <div id=\"lift-selector\">\n      {!props.atEnd ? (\n        <button\n          type=\"button\"\n          onClick={props.selectPreviousLift}\n          className=\"arrow-button\"\n        >\n          &larr;\n        </button>\n      ) : null}\n      <h2>{props.currentLift.name.toUpperCase()}</h2>\n      {props.atBeginning ? (\n        <button\n          type=\"button\"\n          className=\"arrow-button\"\n          onClick={props.toggleNewLiftModal}\n        >\n          &#65291;\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"arrow-button\"\n          onClick={props.selectNextLift}\n        >\n          &rarr;\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst InfoDisplay = props => {\n  const setList = props.sets.map((set, index) => (\n    <div\n      className={props.editable ? 'set editable' : 'set'}\n      key={index}\n      onClick={() =>\n        props.editable\n          ? props.setEditSetModal({ display: true, index: index })\n          : null\n      }\n    >\n      <div className=\"set-weight grid-left\">\n        <b>{set.weight}</b> <span>lbs</span>\n      </div>\n      <div className=\"set-reps\">\n        <b>{set.reps}</b> <span>reps</span>\n      </div>\n      <div className=\"set-rpe grid-left\">\n        <span>@</span> <b>{set.rpe}</b>\n      </div>\n    </div>\n  ));\n  return <div id=\"info-display\">{setList}</div>;\n};\n\nconst mapStateToProps = state => {\n  return {\n    lift: getCurrentLift(state),\n  };\n};\n\nconst matchDispatchToProps = {\n  addLift,\n  incrementCurrentLiftIndex,\n  decrementCurrentLiftIndex\n}\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(LiftLog);\n"]},"metadata":{},"sourceType":"module"}