{"ast":null,"code":"import _objectSpread from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSlice, createSelector } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\nconst initialState = {\n  squat: {\n    byId: {\n      0: {\n        sets: [{\n          weight: 200,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 175,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 225,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [{\n          weight: 200,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 235,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [{\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 215,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [{\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 235,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [{\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 205,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 245,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  },\n  deadlift: {\n    byId: {\n      0: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  },\n  'bench press': {\n    byId: {\n      0: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [{\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }, {\n          weight: 255,\n          reps: 8,\n          rpe: 8\n        }],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  }\n};\nconst liftHistory = createSlice({\n  slice: 'liftHistory',\n  initialState: initialState,\n  reducers: {}\n});\nconst getLiftNamesAlphabetized = createSelector(['liftHistory'], lifts => Object.keys(lifts).sort());\n\nconst getLift = (state, props) => state.liftHistory[props.liftName];\n\nconst getHistoryForLift = createSelector([getLift], liftData => Object.values(liftData.byId).sort((liftA, liftB) => liftB.timestamp - liftA.timestamp));\nconst getHeaviestSetHistoryForLift = createSelector([getHistoryForLift], liftHistory => liftHistory.map(entry => {\n  return {\n    heaviestSet: entry.sets.slice().sort((setA, setB) => setB.weight - setA.weight)[0],\n    timestamp: entry.timestamp\n  };\n}));\nconst getE1RMHistoryForLift = createSelector([getHeaviestSetHistoryForLift], heaviestSets => heaviestSets.filter(entry => entry.heaviestSet.rpe >= 6.5).map(entry => {\n  return {\n    e1rm: calculateE1RM(entry.heaviestSet.weight, entry.heaviestSet.reps, entry.heaviestSet.rpe),\n    timestamp: entry.timestamp\n  };\n}));\nconst testState = {\n  liftHistory: _objectSpread({}, initialState)\n};\nconst actions = liftHistory.actions,\n      reducer = liftHistory.reducer;\nexport { getLiftNamesAlphabetized, getHistoryForLift, getHeaviestSetHistoryForLift, getE1RMHistoryForLift };\nexport { actions as liftHistoryActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/liftHistory.js"],"names":["createSlice","createSelector","calculateE1RM","initialState","squat","byId","sets","weight","reps","rpe","timestamp","allIds","deadlift","liftHistory","slice","reducers","getLiftNamesAlphabetized","lifts","Object","keys","sort","getLift","state","props","liftName","getHistoryForLift","liftData","values","liftA","liftB","getHeaviestSetHistoryForLift","map","entry","heaviestSet","setA","setB","getE1RMHistoryForLift","heaviestSets","filter","e1rm","testState","actions","reducer","liftHistoryActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\n\nconst initialState = {\n  squat: {\n    byId: {\n      0: {\n        sets: [\n          {\n            weight: 200,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 175,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 225,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [\n          {\n            weight: 200,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 235,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 215,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 235,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 205,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 245,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  },\n  deadlift: {\n    byId: {\n      0: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  },\n  'bench press': {\n    byId: {\n      0: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562704818000\n      },\n      1: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562618418000\n      },\n      2: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562445618000\n      },\n      3: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562272818000\n      },\n      4: {\n        sets: [\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          },\n          {\n            weight: 255,\n            reps: 8,\n            rpe: 8\n          }\n        ],\n        timestamp: 1562100018000\n      }\n    },\n    allIds: [0, 1, 2, 3, 4]\n  }\n};\n\nconst liftHistory = createSlice({\n  slice: 'liftHistory',\n  initialState: initialState,\n  reducers: {}\n});\n\nconst getLiftNamesAlphabetized = createSelector(\n  ['liftHistory'],\n  lifts => Object.keys(lifts).sort()\n);\n\nconst getLift = (state, props) => state.liftHistory[props.liftName];\n\nconst getHistoryForLift = createSelector(\n  [getLift],\n  liftData =>\n    Object.values(liftData.byId).sort(\n      (liftA, liftB) => liftB.timestamp - liftA.timestamp\n    )\n);\n\nconst getHeaviestSetHistoryForLift = createSelector(\n  [getHistoryForLift],\n  liftHistory =>\n    liftHistory.map(entry => {\n      return {\n        heaviestSet: entry.sets\n          .slice()\n          .sort((setA, setB) => setB.weight - setA.weight)[0],\n        timestamp: entry.timestamp\n      };\n    })\n);\n\nconst getE1RMHistoryForLift = createSelector(\n  [getHeaviestSetHistoryForLift],\n  heaviestSets =>\n    heaviestSets\n      .filter(entry => entry.heaviestSet.rpe >= 6.5)\n      .map(entry => {\n        return {\n          e1rm: calculateE1RM(\n            entry.heaviestSet.weight,\n            entry.heaviestSet.reps,\n            entry.heaviestSet.rpe\n          ),\n          timestamp: entry.timestamp\n        };\n      })\n);\n\nconst testState = {\n  liftHistory: { ...initialState }\n};\n\nconst { actions, reducer } = liftHistory;\n\nexport {\n  getLiftNamesAlphabetized,\n  getHistoryForLift,\n  getHeaviestSetHistoryForLift,\n  getE1RMHistoryForLift\n};\nexport { actions as liftHistoryActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}