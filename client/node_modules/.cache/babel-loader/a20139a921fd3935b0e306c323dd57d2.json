{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/RestTimer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './RestTimer.scss';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport soundFile from '../assets/audio/bell.wav';\n\nconst RestTimer = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n\n  const _useState = useState(NaN),\n        _useState2 = _slicedToArray(_useState, 2),\n        secondsRemaining = _useState2[0],\n        setSecondsRemaining = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        notificationSoundPlayed = _useState4[0],\n        setNotificationSoundPlayed = _useState4[1]; // Update timer every second.\n\n\n  useInterval(() => {\n    setSecondsRemaining(timer.duration - (Date.now() - timer.timeStarted) / 1000);\n  }, 1000); // Play sound when rest finishes.\n\n  useEffect(() => {\n    if (secondsRemaining <= 0 && !notificationSoundPlayed) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n      setNotificationSoundPlayed(true);\n    }\n  }, [secondsRemaining]); // Render based on seconds remaining.\n\n  if (secondsRemaining > 0) {\n    return React.createElement(\"div\", {\n      className: \"rest-timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"REST COUNTDOWN: \", prettyDisplayTime(secondsRemaining));\n  } else if (secondsRemaining <= 0) {\n    return React.createElement(\"div\", {\n      className: \"rest-timer\",\n      id: \"rest-finished\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"REST FINISHED!\"));\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/RestTimer.js"],"names":["React","useState","useEffect","useSelector","prettyDisplayTime","useInterval","soundFile","RestTimer","props","timer","state","currentWorkout","restTimer","NaN","secondsRemaining","setSecondsRemaining","notificationSoundPlayed","setNotificationSoundPlayed","duration","Date","now","timeStarted","sound","Audio","src","play"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,kBAAP;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAMC,KAAK,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,SAA/B,CAAzB;;AADyB,oBAEuBX,QAAQ,CAACY,GAAD,CAF/B;AAAA;AAAA,QAElBC,gBAFkB;AAAA,QAEAC,mBAFA;;AAAA,qBAGqCd,QAAQ,CAAC,KAAD,CAH7C;AAAA;AAAA,QAGlBe,uBAHkB;AAAA,QAGOC,0BAHP,kBAKzB;;;AACAZ,EAAAA,WAAW,CAAC,MAAM;AAChBU,IAAAA,mBAAmB,CAChBN,KAAK,CAACS,QAAN,GAAiB,CAACC,IAAI,CAACC,GAAL,KAAaX,KAAK,CAACY,WAApB,IAAmC,IADpC,CAAnB;AAGD,GAJU,EAIR,IAJQ,CAAX,CANyB,CAYzB;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,gBAAgB,IAAI,CAApB,IAAyB,CAACE,uBAA9B,EAAuD;AACrD,YAAMM,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,GAAYlB,SAAZ;AACAgB,MAAAA,KAAK,CAACG,IAAN;AACAR,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACD;AACF,GAPQ,EAON,CAACH,gBAAD,CAPM,CAAT,CAbyB,CAsBzB;;AACA,MAAIA,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACmBV,iBAAiB,CAACU,gBAAD,CADpC,CADF;AAKD,GAND,MAMO,IAAIA,gBAAgB,IAAI,CAAxB,EAA2B;AAChC,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,EAAE,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF;AAKD,GANM,MAMA;AACL,WAAO,IAAP;AACD;AACF,CAtCD;;AAwCA,eAAeP,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './RestTimer.scss';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport soundFile from '../assets/audio/bell.wav';\n\nconst RestTimer = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n  const [secondsRemaining, setSecondsRemaining] = useState(NaN);\n  const [notificationSoundPlayed, setNotificationSoundPlayed] = useState(false);\n\n  // Update timer every second.\n  useInterval(() => {\n    setSecondsRemaining(\n      (timer.duration - (Date.now() - timer.timeStarted) / 1000) \n    );\n  }, 1000);\n\n  // Play sound when rest finishes.\n  useEffect(() => {\n    if (secondsRemaining <= 0 && !notificationSoundPlayed) {\n      const sound = new Audio();\n      sound.src = soundFile;\n      sound.play();\n      setNotificationSoundPlayed(true);\n    }\n  }, [secondsRemaining]);\n\n  // Render based on seconds remaining.\n  if (secondsRemaining > 0) {\n    return (\n      <div className=\"rest-timer\">\n        REST COUNTDOWN: {prettyDisplayTime(secondsRemaining)}\n      </div>\n    );\n  } else if (secondsRemaining <= 0) {\n    return (\n      <div className=\"rest-timer\" id=\"rest-finished\">\n        <b>REST FINISHED!</b>\n      </div>\n    )\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimer;\n"]},"metadata":{},"sourceType":"module"}