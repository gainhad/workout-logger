{"ast":null,"code":"import _objectSpread from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\nconst initialState = {\n  lifts: [{\n    name: 'SQUAT',\n    sets: [{\n      weight: 255,\n      reps: 10,\n      rpe: 6\n    }, {\n      weight: 287,\n      reps: 7,\n      rpe: 7\n    }, {\n      weight: 287,\n      reps: 8,\n      rpe: 8\n    }]\n  }, {\n    name: 'DEADLIFT',\n    sets: []\n  }, {\n    name: 'BENCH PRESS',\n    sets: []\n  }],\n  currentLiftIndex: 0,\n  restTimer: {}\n};\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  };\n}\n\nfunction addLiftReducer(state, {\n  payload\n}) {\n  state.lifts.unshift({\n    name: payload.name,\n    sets: []\n  });\n}\n\nfunction deleteLiftReducer(state, {\n  payload\n}) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, {\n  payload\n}) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimerReducer(state, {\n  payload\n}) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer\n  },\n  extraReducers: {\n    startRestTimer: startRestTimerReducer\n  }\n}); // Selectors\n\nconst getCurrentLiftIndex = createSelector(['currentWorkout.currentLiftIndex'], index => index);\nconst getCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index]);\nconst getSetsForCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index].sets);\nconst atEnd = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => index === lifts.length - 1);\nconst atBeginning = createSelector(['currentWorkout.currentLiftIndex'], index => index === 0);\nconst getHeaviestSet = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => {\n  if (lifts[index].sets.length) {\n    return lifts[index].sets.reduce((setA, setB) => {\n      return setA.weight >= setB.weight ? setA : setB;\n    });\n  }\n});\nconst getEstimatedOneRepMax = createSelector([getHeaviestSet], set => {\n  if (set && set.rpe >= 6.5) {\n    return calculateE1RM(set.weight, set.reps, set.rpe);\n  }\n}); // TODO - Delete after testing is finished\n\nconst testState = {\n  currentWorkout: _objectSpread({}, initialState)\n};\nconst actions = currentWorkout.actions,\n      reducer = currentWorkout.reducer;\nactions.startRestTimer = startRestTimer;\nconsole.log(actions.startRestTimer(60));\nexport { getSetsForCurrentLift, getCurrentLift, atBeginning, atEnd, getEstimatedOneRepMax };\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/currentWorkout.js"],"names":["createSlice","createSelector","configureStore","calculateE1RM","initialState","lifts","name","sets","weight","reps","rpe","currentLiftIndex","restTimer","startRestTimer","duration","type","payload","timeStarted","Date","now","addLiftReducer","state","unshift","deleteLiftReducer","splice","index","renameLiftReducer","addSetReducer","liftIndex","push","set","deleteSetReducer","setIndex","updateSetReducer","updatedSet","incrementCurrentLiftIndexReducer","length","decrementCurrentLiftIndexReducer","startRestTimerReducer","currentWorkout","slice","reducers","addLift","deleteLift","renameLift","addSet","deleteSet","updateSet","incrementCurrentLiftIndex","decrementCurrentLiftIndex","extraReducers","getCurrentLiftIndex","getCurrentLift","getSetsForCurrentLift","atEnd","atBeginning","getHeaviestSet","reduce","setA","setB","getEstimatedOneRepMax","testState","actions","reducer","console","log","currentWorkoutActions"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nimport { calculateE1RM } from '../../utils/calculations.js';\n\nconst initialState = {\n  lifts: [\n    {\n      name: 'SQUAT',\n      sets: [\n        { weight: 255, reps: 10, rpe: 6 },\n        { weight: 287, reps: 7, rpe: 7 },\n        { weight: 287, reps: 8, rpe: 8 }\n      ]\n    },\n    { name: 'DEADLIFT', sets: [] },\n    { name: 'BENCH PRESS', sets: [] }\n  ],\n  currentLiftIndex: 0,\n  restTimer: {}\n};\n\nfunction startRestTimer(duration) {\n  return {\n    type: 'currentWorkout/startRestTimer',\n    payload: {\n      timeStarted: Date.now(),\n      duration: duration\n    }\n  }\n}\n\nfunction addLiftReducer(state, { payload }) {\n  state.lifts.unshift({ name: payload.name, sets: [] });\n}\n\nfunction deleteLiftReducer(state, { payload }) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, { payload }) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nfunction startRestTimerReducer(state, { payload }) {\n  state.restTimer = {\n    timeStarted: payload.timeStarted,\n    duration: payload.duration\n  };\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer\n  },\n  extraReducers: {\n    startRestTimer: startRestTimerReducer\n  }\n});\n\n// Selectors\nconst getCurrentLiftIndex = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index\n);\n\nconst getCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index]\n);\n\nconst getSetsForCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index].sets\n);\n\nconst atEnd = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => index === lifts.length - 1\n);\n\nconst atBeginning = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index === 0\n);\n\nconst getHeaviestSet = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => {\n    if (lifts[index].sets.length) {\n      return lifts[index].sets.reduce((setA, setB) => {\n        return setA.weight >= setB.weight ? setA : setB;\n      });\n    }\n  }\n);\n\nconst getEstimatedOneRepMax = createSelector(\n  [getHeaviestSet],\n  set => {\n    if (set && set.rpe >= 6.5) {\n      return calculateE1RM(set.weight, set.reps, set.rpe);\n    }\n  }\n);\n\n// TODO - Delete after testing is finished\nconst testState = {\n  currentWorkout: { ...initialState }\n};\n\nconst { actions, reducer } = currentWorkout;\nactions.startRestTimer = startRestTimer;\nconsole.log(actions.startRestTimer(60));\nexport {\n  getSetsForCurrentLift,\n  getCurrentLift,\n  atBeginning,\n  atEnd,\n  getEstimatedOneRepMax\n};\nexport { initialState, actions as currentWorkoutActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}