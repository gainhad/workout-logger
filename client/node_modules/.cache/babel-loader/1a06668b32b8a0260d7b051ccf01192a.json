{"ast":null,"code":"import { createSlice, createSelector, configureStore } from 'redux-starter-kit';\nconst initialState = {\n  lifts: [{\n    name: 'SQUAT',\n    sets: [{\n      weight: 255,\n      reps: 10,\n      rpe: 6\n    }, {\n      weight: 287,\n      reps: 7,\n      rpe: 7\n    }]\n  }, {\n    name: 'DEADLIFT',\n    sets: []\n  }, {\n    name: 'BENCH PRESS',\n    sets: []\n  }],\n  currentLiftIndex: 0\n};\n\nfunction addLiftReducer(state, {\n  payload\n}) {\n  state.lifts.unshift({\n    name: payload.name,\n    sets: []\n  });\n}\n\nfunction deleteLiftReducer(state, {\n  payload\n}) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, {\n  payload\n}) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, {\n  payload\n}) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer\n  }\n}); // Selectors\n\nconst getCurrentLiftIndex = createSelector(['currentWorkout.currentLiftIndex'], index => index);\nconst getCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index]);\nconst getSetsForCurrentLift = createSelector(['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'], (index, lifts) => lifts[index].sets);\nconsole.log(currentWorkout);\nconst actions = currentWorkout.actions,\n      reducer = currentWorkout.reducer;\nconst addLift = actions.addLift,\n      deleteLift = actions.deleteLift,\n      renameLift = actions.renameLift,\n      deleteSet = actions.deleteSet,\n      incrementCurrentLiftIndex = actions.incrementCurrentLiftIndex,\n      decrementCurrentLiftIndex = actions.decrementCurrentLiftIndex;\nexport { addLift, deleteLift, renameLift, deleteSet, incrementCurrentLiftIndex, decrementCurrentLiftIndex };\nexport { getSetsForCurrentLift, getCurrentLift };\nexport { initialState };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/currentWorkout.js"],"names":["createSlice","createSelector","configureStore","initialState","lifts","name","sets","weight","reps","rpe","currentLiftIndex","addLiftReducer","state","payload","unshift","deleteLiftReducer","splice","index","renameLiftReducer","addSetReducer","liftIndex","push","set","deleteSetReducer","setIndex","updateSetReducer","updatedSet","incrementCurrentLiftIndexReducer","length","decrementCurrentLiftIndexReducer","currentWorkout","slice","reducers","addLift","deleteLift","renameLift","addSet","deleteSet","updateSet","incrementCurrentLiftIndex","decrementCurrentLiftIndex","getCurrentLiftIndex","getCurrentLift","getSetsForCurrentLift","console","log","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createSelector, configureStore } from 'redux-starter-kit';\n\nconst initialState = {\n  lifts: [\n    {\n      name: 'SQUAT',\n      sets: [\n        { weight: 255, reps: 10, rpe: 6 },\n        { weight: 287, reps: 7, rpe: 7 }\n      ]\n    },\n    { name: 'DEADLIFT', sets: [] },\n    { name: 'BENCH PRESS', sets: [] }\n  ],\n  currentLiftIndex: 0\n};\n\nfunction addLiftReducer(state, { payload }) {\n  state.lifts.unshift({ name: payload.name, sets: [] });\n}\n\nfunction deleteLiftReducer(state, { payload }) {\n  state.lifts.splice(payload.index, 1);\n}\n\nfunction renameLiftReducer(state, { payload }) {\n  state.lifts[payload.index].name = payload.name;\n}\n\nfunction addSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.push(payload.set);\n}\n\nfunction deleteSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets.splice(payload.setIndex, 1);\n}\n\nfunction updateSetReducer(state, { payload }) {\n  state.lifts[payload.liftIndex].sets[payload.setIndex] = payload.updatedSet;\n}\n\nfunction incrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex < state.lifts.length - 1) {\n    ++state.currentLiftIndex;\n  }\n}\n\nfunction decrementCurrentLiftIndexReducer(state) {\n  if (state.currentLiftIndex > 0) {\n    --state.currentLiftIndex;\n  }\n}\n\nconst currentWorkout = createSlice({\n  slice: 'currentWorkout',\n  initialState: initialState,\n  reducers: {\n    addLift: addLiftReducer,\n    deleteLift: deleteLiftReducer,\n    renameLift: renameLiftReducer,\n    addSet: addSetReducer,\n    deleteSet: deleteSetReducer,\n    updateSet: updateSetReducer,\n    incrementCurrentLiftIndex: incrementCurrentLiftIndexReducer,\n    decrementCurrentLiftIndex: decrementCurrentLiftIndexReducer\n  }\n});\n\n// Selectors\nconst getCurrentLiftIndex = createSelector(\n  ['currentWorkout.currentLiftIndex'],\n  index => index\n);\n\nconst getCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index]\n);\n\nconst getSetsForCurrentLift = createSelector(\n  ['currentWorkout.currentLiftIndex', 'currentWorkout.lifts'],\n  (index, lifts) => lifts[index].sets\n);\n\nconsole.log(currentWorkout);\n\nconst { actions, reducer } = currentWorkout;\nexport const {\n  addLift,\n  deleteLift,\n  renameLift,\n  deleteSet,\n  incrementCurrentLiftIndex,\n  decrementCurrentLiftIndex\n} = actions;\nexport { getSetsForCurrentLift, getCurrentLift };\nexport { initialState };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}