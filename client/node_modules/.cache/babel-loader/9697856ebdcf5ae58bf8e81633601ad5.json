{"ast":null,"code":"import _slicedToArray from \"/Users/Hadley/src/workout-logger/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Hadley/src/workout-logger/src/components/RestTimerDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport './RestTimerDisplay';\n\nconst RestTimerDisplay = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n\n  const updateSecondsRemaining = timer => timer.duration - (Date.now() - timeStarted) / 1000;\n\n  const _useState = useState(updateSecondsRemaining(timer)),\n        _useState2 = _slicedToArray(_useState, 2),\n        secondsRemaining = _useState2[0],\n        setSecondsRemaining = _useState2[1]; // Update timer every second.\n\n\n  useInterval(() => {\n    setSecondsRemaining(timer.duration - (Date.now() - timer.timeStarted) / 1000);\n  }, 1000);\n\n  if (secondsRemaining > 0) {\n    return React.createElement(\"div\", {\n      className: \"rest-timer-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"REST COUNTDOWN: \", prettyDisplayTime(secondsRemaining));\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimerDisplay;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/components/RestTimerDisplay.js"],"names":["React","useState","useEffect","useSelector","prettyDisplayTime","useInterval","RestTimerDisplay","props","timer","state","currentWorkout","restTimer","updateSecondsRemaining","duration","Date","now","timeStarted","secondsRemaining","setSecondsRemaining"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAO,oBAAP;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAMC,KAAK,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,SAA/B,CAAzB;;AACA,QAAMC,sBAAsB,GAAGJ,KAAK,IAClCA,KAAK,CAACK,QAAN,GAAiB,CAACC,IAAI,CAACC,GAAL,KAAaC,WAAd,IAA6B,IADhD;;AAFgC,oBAIgBf,QAAQ,CAACW,sBAAsB,CAACJ,KAAD,CAAvB,CAJxB;AAAA;AAAA,QAIzBS,gBAJyB;AAAA,QAIPC,mBAJO,kBAMhC;;;AACAb,EAAAA,WAAW,CAAC,MAAM;AAChBa,IAAAA,mBAAmB,CACjBV,KAAK,CAACK,QAAN,GAAiB,CAACC,IAAI,CAACC,GAAL,KAAaP,KAAK,CAACQ,WAApB,IAAmC,IADnC,CAAnB;AAGD,GAJU,EAIR,IAJQ,CAAX;;AAMA,MAAIC,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACmBb,iBAAiB,CAACa,gBAAD,CADpC,CADF;AAKD,GAND,MAMO;AACL,WAAO,IAAP;AACD;AACF,CAtBD;;AAwBA,eAAeX,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { prettyDisplayTime } from '../utils/displayHelpers';\nimport { useInterval } from '../utils/customHooks';\nimport './RestTimerDisplay';\n\nconst RestTimerDisplay = props => {\n  const timer = useSelector(state => state.currentWorkout.restTimer);\n  const updateSecondsRemaining = timer =>\n    timer.duration - (Date.now() - timeStarted) / 1000;\n  const [secondsRemaining, setSecondsRemaining] = useState(updateSecondsRemaining(timer));\n\n  // Update timer every second.\n  useInterval(() => {\n    setSecondsRemaining(\n      timer.duration - (Date.now() - timer.timeStarted) / 1000\n    );\n  }, 1000);\n\n  if (secondsRemaining > 0) {\n    return (\n      <div className=\"rest-timer-display\">\n        REST COUNTDOWN: {prettyDisplayTime(secondsRemaining)}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default RestTimerDisplay;\n"]},"metadata":{},"sourceType":"module"}