{"ast":null,"code":"import { createSlice, createSelector } from 'redux-starter-kit';\nconst initialState = {\n  weight: [{\n    timestamp: 1562783942272,\n    measurement: 160\n  }, {\n    timestamp: 1562797642272,\n    measurement: 190\n  }, {\n    timestamp: 1562123042272,\n    measurement: 80\n  }, {\n    timestamp: 1562782452272,\n    measurement: 480\n  }],\n  waist: [{\n    timestamp: 1562783942272,\n    measurement: 60\n  }, {\n    timestamp: 1562797642272,\n    measurement: 90\n  }, {\n    timestamp: 1562123042272,\n    measurement: 30\n  }, {\n    timestamp: 1562782452272,\n    measurement: 80\n  }]\n}; // Custom Actions\n\nfunction addOrUpdateMeasurement(index = NaN, type, measurement) {\n  return {\n    type: 'measurementHistory',\n    meta: {\n      index: index,\n      type: type\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n} // Reducers\n\n\nfunction addOrUpdateMeasurementReducer(state, {\n  payload\n}) {\n  if (isNaN(payload.index)) {\n    state[payload.type].unshift(payload.data);\n  } else {\n    state[payload.index] = payload.data;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {}\n});\nconst actions = measurementHistory.actions,\n      reducer = measurementHistory.reducer;\nexport { actions as measurementHistoryActions };\nexport default reducer;","map":{"version":3,"sources":["/Users/Hadley/src/workout-logger/src/redux/slices/measurementHistory.js"],"names":["createSlice","createSelector","initialState","weight","timestamp","measurement","waist","addOrUpdateMeasurement","index","NaN","type","meta","payload","Date","now","addOrUpdateMeasurementReducer","state","isNaN","unshift","data","measurementHistory","slice","reducers","actions","reducer","measurementHistoryActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,mBAA5C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GADM,EAKN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GALM,EASN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GATM,EAaN;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GAbM,CADW;AAmBnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GADK,EAKL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GALK,EASL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GATK,EAaL;AACED,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,WAAW,EAAE;AAFf,GAbK;AAnBY,CAArB,C,CAuCA;;AACA,SAASE,sBAAT,CAAgCC,KAAK,GAAGC,GAAxC,EAA6CC,IAA7C,EAAmDL,WAAnD,EAAgE;AAC9D,SAAO;AACLK,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,IAAI,EAAE;AACJH,MAAAA,KAAK,EAAEA,KADH;AAEJE,MAAAA,IAAI,EAAEA;AAFF,KAFD;AAOLE,IAAAA,OAAO,EAAE;AACPR,MAAAA,SAAS,EAAES,IAAI,CAACC,GAAL,EADJ;AAEPT,MAAAA,WAAW,EAAEA;AAFN;AAPJ,GAAP;AAYD,C,CAED;;;AACA,SAASU,6BAAT,CAAuCC,KAAvC,EAA8C;AAAEJ,EAAAA;AAAF,CAA9C,EAA2D;AACzD,MAAIK,KAAK,CAACL,OAAO,CAACJ,KAAT,CAAT,EAA0B;AACxBQ,IAAAA,KAAK,CAACJ,OAAO,CAACF,IAAT,CAAL,CAAoBQ,OAApB,CAA4BN,OAAO,CAACO,IAApC;AACD,GAFD,MAEO;AACLH,IAAAA,KAAK,CAACJ,OAAO,CAACJ,KAAT,CAAL,GAAuBI,OAAO,CAACO,IAA/B;AACD;AACF;;AAED,MAAMC,kBAAkB,GAAGpB,WAAW,CAAC;AACrCqB,EAAAA,KAAK,EAAE,oBAD8B;AAErCnB,EAAAA,YAAY,EAAEA,YAFuB;AAGrCoB,EAAAA,QAAQ,EAAE;AAH2B,CAAD,CAAtC;MAMQC,O,GAAqBH,kB,CAArBG,O;MAASC,O,GAAYJ,kB,CAAZI,O;AACjB,SAASD,OAAO,IAAIE,yBAApB;AACA,eAAeD,OAAf","sourcesContent":["import { createSlice, createSelector } from 'redux-starter-kit';\n\nconst initialState = {\n  weight: [\n    {\n      timestamp: 1562783942272,\n      measurement: 160\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 190\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 80\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 480\n    }\n  ],\n  waist: [\n    {\n      timestamp: 1562783942272,\n      measurement: 60\n    },\n    {\n      timestamp: 1562797642272,\n      measurement: 90\n    },\n    {\n      timestamp: 1562123042272,\n      measurement: 30\n    },\n    {\n      timestamp: 1562782452272,\n      measurement: 80\n    }\n  ]\n};\n\n// Custom Actions\nfunction addOrUpdateMeasurement(index = NaN, type, measurement) {\n  return {\n    type: 'measurementHistory',\n    meta: {\n      index: index,\n      type: type\n\n    },\n    payload: {\n      timestamp: Date.now(),\n      measurement: measurement\n    }\n  };\n}\n\n// Reducers\nfunction addOrUpdateMeasurementReducer(state, { payload }) {\n  if (isNaN(payload.index)) {\n    state[payload.type].unshift(payload.data);\n  } else {\n    state[payload.index] = payload.data;\n  }\n}\n\nconst measurementHistory = createSlice({\n  slice: 'measurementHistory',\n  initialState: initialState,\n  reducers: {}\n});\n\nconst { actions, reducer } = measurementHistory;\nexport { actions as measurementHistoryActions };\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}